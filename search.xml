<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>阅读管理</title>
      <link href="/2019/11/22/%E9%98%85%E8%AF%BB%E7%AE%A1%E7%90%86/"/>
      <url>/2019/11/22/%E9%98%85%E8%AF%BB%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="前言与管理方法"><a href="#前言与管理方法" class="headerlink" title="前言与管理方法"></a>前言与管理方法</h2><p>准备有计划的读书，拓宽自己的视野，这个想法一直都有，不过总是没能坚持下去。</p><p>现在通过博客的方式进行整理和规划，以下为管理策略</p><p>想读的书</p><p>已完成</p><p>注意标注开始时间和完成时间，有必要的书创建新的文章记下阅读感想、对应的博客跳转链接</p><h2 id="想读的书"><a href="#想读的书" class="headerlink" title="想读的书"></a>想读的书</h2><ul><li>191122<a href="https://book.douban.com/subject/6709783/" target="_blank" rel="noopener">浪潮之巅</a></li></ul><h2 id="已完成"><a href="#已完成" class="headerlink" title="已完成"></a>已完成</h2>]]></content>
      
      
      <categories>
          
          <category> life </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PAT-1003</title>
      <link href="/2019/11/22/PAT-1003/"/>
      <url>/2019/11/22/PAT-1003/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>Emergency</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>非常典型的单源最短路问题，还涉及的点权max和最短路条数的计算</p><p>技巧除了dijkstra之外，还有对于num数组的理解<br><img src="1.png" alt="理解"></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//n&lt;=500</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">510</span>;<span class="comment">//数据规模</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;<span class="comment">//代表无限大</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//[0,n-1]</span></span><br><span class="line"><span class="keyword">int</span> G[maxn][maxn];<span class="comment">//存储道路</span></span><br><span class="line"><span class="keyword">int</span> w[maxn];<span class="comment">//每个地方救援队的数量，相当于点权</span></span><br><span class="line"><span class="keyword">int</span> dis[maxn];<span class="comment">//记录每个城市距离出发点的最短距离</span></span><br><span class="line"><span class="keyword">bool</span> vis[maxn];<span class="comment">//标记访问</span></span><br><span class="line"><span class="keyword">int</span> num[maxn];<span class="comment">//记录从出发点到i城市的最短路的条数</span></span><br><span class="line"><span class="keyword">int</span> weight[maxn];<span class="comment">//记录在最短路情况下，经过每个点使，最大的救援队数量</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 先进行初始化</span></span><br><span class="line">    <span class="built_in">fill</span>(G[<span class="number">0</span>],G[<span class="number">0</span>]+maxn*maxn,INF);<span class="comment">//地图点不可达</span></span><br><span class="line">    <span class="built_in">fill</span>(dis,dis+maxn,INF);<span class="comment">//初始距离最大化后面才能进行优化</span></span><br><span class="line">    <span class="keyword">int</span> n,m,c1,c2;<span class="comment">//城市数量，道路数量，出发，终点</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>,&amp;n,&amp;m,&amp;c1,&amp;c2);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;w[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> a,b,c;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;a,&amp;b,&amp;c);</span><br><span class="line">        G[a][b]=G[b][a]=c;</span><br><span class="line">    &#125;</span><br><span class="line">    dis[c1]=<span class="number">0</span>;</span><br><span class="line">    num[c1]=<span class="number">1</span>;</span><br><span class="line">    weight[c1]=w[c1];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> u=<span class="number">-1</span>,minn=INF;<span class="comment">//从未访问的点中寻找dis最小的</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(vis[j]==<span class="literal">false</span> &amp;&amp; dis[j]&lt;minn)&#123;</span><br><span class="line">                minn=dis[j];</span><br><span class="line">                u=j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(u==<span class="number">-1</span>)&#123;<span class="comment">//没有点需要再进行优化</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//以u作为出发点，优化别的可到达且未标记的点</span></span><br><span class="line">        vis[u]=<span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> v=<span class="number">0</span>;v&lt;n;v++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(vis[v]==<span class="literal">false</span> &amp;&amp; G[u][v]!=INF)&#123;</span><br><span class="line">                <span class="keyword">if</span>(dis[u]+G[u][v]&lt;dis[v])&#123;</span><br><span class="line">                    dis[v]=dis[u]+G[u][v];</span><br><span class="line">                    num[v]=num[u];</span><br><span class="line">                    weight[v]=weight[u]+w[v];</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(dis[u]+G[u][v]==dis[v])&#123;</span><br><span class="line">                    num[v]=num[u]+num[v];<span class="comment">//精辟！！！</span></span><br><span class="line">                    <span class="keyword">if</span>(weight[u]+w[v]&gt;weight[v])&#123;</span><br><span class="line">                        weight[v]=weight[u]+w[v];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d %d"</span>,num[c2],weight[c2]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dijkstra </tag>
            
            <tag> 图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT-1043</title>
      <link href="/2019/11/20/PAT-1043/"/>
      <url>/2019/11/20/PAT-1043/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>Is It a Binary Search Tree<br><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805440976633856" target="_blank" rel="noopener">https://pintia.cn/problem-sets/994805342720868352/problems/994805440976633856</a></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>问所给序列是否是对于排序二叉树的先序序列，或者是镜像先序序列</p><p>所谓镜像先序序列，就是说在建立的时候，所有节点的左右子树左右调换后的排序二叉树的先序序列，这个不用重新再建立一个，访问正常建立二叉排序树的时候左右调换就行了</p><p>遇到了段错误问题，注意声明root的时候, Node* root=NULL;这样写就不会出现了，貌似clang++可以把这个自动优化，以后出现段错误可以尝试换个编译器</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    Node* left;</span><br><span class="line">    Node* right;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(Node* &amp;root,<span class="keyword">int</span> data)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root==<span class="literal">NULL</span>)&#123;</span><br><span class="line">        root=<span class="keyword">new</span> Node;</span><br><span class="line">        root-&gt;data=data;</span><br><span class="line">        root-&gt;left=root-&gt;right=<span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(data&lt;root-&gt;data)&#123;</span><br><span class="line">        insert(root-&gt;left,data);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        insert(root-&gt;right,data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">preOrder</span><span class="params">(Node *root,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;vi)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root==<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    vi.push_back(root-&gt;data);</span><br><span class="line">    preOrder(root-&gt;left,vi);</span><br><span class="line">    preOrder(root-&gt;right,vi);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">preOrderMirror</span><span class="params">(Node* root,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;vi)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root==<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    vi.push_back(root-&gt;data);</span><br><span class="line">    preOrderMirror(root-&gt;right,vi);</span><br><span class="line">    preOrderMirror(root-&gt;left,vi);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">postOrder</span><span class="params">(Node* root,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;vi)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root==<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    postOrder(root-&gt;left,vi);</span><br><span class="line">    postOrder(root-&gt;right,vi);</span><br><span class="line">    vi.push_back(root-&gt;data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">postOrderMirror</span><span class="params">(Node* root,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;vi)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root==<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    postOrderMirror(root-&gt;right,vi);</span><br><span class="line">    postOrderMirror(root-&gt;left,vi);</span><br><span class="line">    vi.push_back(root-&gt;data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; origin,pre,preM,post,postM;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    Node* root=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;data);</span><br><span class="line">        origin.push_back(data);</span><br><span class="line">        insert(root,data);</span><br><span class="line">    &#125;</span><br><span class="line">    preOrder(root,pre);</span><br><span class="line">    preOrderMirror(root,preM);</span><br><span class="line">    postOrder(root,post);</span><br><span class="line">    postOrderMirror(root,postM);</span><br><span class="line">    <span class="keyword">if</span>(origin==pre)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"YES\n"</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d"</span>,post[i]);</span><br><span class="line">            <span class="keyword">if</span>(i!=n<span class="number">-1</span>)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(origin==preM)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"YES\n"</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d"</span>,postM[i]);</span><br><span class="line">            <span class="keyword">if</span>(i!=n<span class="number">-1</span>)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT-1053</title>
      <link href="/2019/11/19/PAT-1053/"/>
      <url>/2019/11/19/PAT-1053/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>Path of Equal Weight<br><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805424153280512" target="_blank" rel="noopener">https://pintia.cn/problem-sets/994805342720868352/problems/994805424153280512</a></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>题目求解从Root到Leaves，即从根节点到叶子节点中，路径上总w等于target的路径，输出要求，字典序大在前</p><p>关键在于怎么写dfs和过程中如何输出答案</p><p>dfs中利用nodeNum来累计当前所在的层数，利用path保存便利过程中的路径</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> w;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; child;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,target;</span><br><span class="line"><span class="built_in">vector</span>&lt;Node&gt; node;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; path;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> node[a].w&gt;node[b].w;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> index,<span class="keyword">int</span> nodeNum,<span class="keyword">int</span> sum)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(sum&gt;target)&#123;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(sum==target)&#123;</span><br><span class="line">        <span class="keyword">if</span>(node[index].child.<span class="built_in">size</span>()!=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nodeNum;i++)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d%c"</span>,node[path[i]].w,i != nodeNum<span class="number">-1</span> ? <span class="string">' '</span>:<span class="string">'\n'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;node[index].child.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> child=node[index].child[i];</span><br><span class="line">        path[nodeNum]=child;</span><br><span class="line">        dfs(child,nodeNum+<span class="number">1</span>,sum+node[child].w);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;n,&amp;m,&amp;target);</span><br><span class="line">    node.resize(n);</span><br><span class="line">    path.resize(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;node[i].w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> tem,cnt;<span class="comment">//当前用哪个节点 孩子数量</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;tem,&amp;cnt);</span><br><span class="line">        node[tem].child.resize(cnt);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;cnt;j++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;node[tem].child[j]);</span><br><span class="line">        &#125;</span><br><span class="line">        sort(node[tem].child.<span class="built_in">begin</span>(),node[tem].child.<span class="built_in">end</span>(),cmp);</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(<span class="number">0</span>,<span class="number">1</span>,node[<span class="number">0</span>].w);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dfs </tag>
            
            <tag> 树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Win环境配置</title>
      <link href="/2019/11/19/Win%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
      <url>/2019/11/19/Win%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>万般不情愿，还是换回了win，毕竟一个大显示器放在旁边不用也是太难受了，而且大的显示器对我帮助很大，只能换回来了，黑苹果不能使用独显，而我的笔记本只能用独显外界显示器</p><h2 id="管理策略"><a href="#管理策略" class="headerlink" title="管理策略"></a>管理策略</h2><p>一段macos的使用帮助了我很多，关于新的系统管理我也想使用一样的设计理念</p><ol><li>c盘不用，只用来放系统</li><li>d盘作为日常根使用盘，相当于mac下的用户目录</li><li>文件都下载到一个位置</li><li>软件的安装分为两个方面<ol><li>类似php，java,git…的安装，需要配置环境 -&gt; 使用scoop放到scoop文件夹下</li><li>有图像化操作窗口的，和需要快捷win支持的，自己手动下载，放到pro下</li></ol></li><li>日常的学习文件直接放在根目录下</li></ol><p>下面是效果图<br><img src="1.png" alt="2"></p><h2 id="scoop管理工具"><a href="#scoop管理工具" class="headerlink" title="scoop管理工具"></a>scoop管理工具</h2><p>发现scoop真是意外之喜，Scoop是win下的包管理器，类似homebrew(真是太想念它了，5555)，适合用来配置开发环境</p><p>scoop不仅轻量，可以直接装到我们的指定目录下，不需要申请管理员权限也不会污染系统环境变量</p><p>下面记录一下安装</p><p>我的方案是不管是不是全局，都放到一个文件夹下，我不会用scoop下载过多的工具软件，因为不方便在win下的操作，比如利用scoop下载的bandzip没法快捷压缩文件等等的问题，还是自己手动去下载方便</p><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">[environment]::setEnvironmentVariable('SCOOP','D:\scoop','User')</span><br><span class="line">$env:SCOOP='D:\scoop'</span><br><span class="line">[environment]::setEnvironmentVariable('SCOOP_GLOBAL','D:\scoop','Machine')</span><br><span class="line">$env:SCOOP_GLOBAL='D:\scoop'</span><br><span class="line">iex (new-object <span class="built_in">net</span>.webclient).downloadstring('https://get.scoop.sh')</span><br></pre></td></tr></table></figure><p>在scoop里面，bucket就是一个软件仓库，默认的仓库里有些软件是没有的，我们要添加一些bucket(之前需要先安装git)</p><p><a href="<<https://github.com/rasa/scoop-directory/blob/master/by-score.md">bucket排行</a>&gt;</p><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">scoop install git</span><br><span class="line">scoop bucket add extras</span><br></pre></td></tr></table></figure><p>这样就可以安装你想要的工具了</p><p>参考:<br><a href="https://sspai.com/post/52710" target="_blank" rel="noopener">https://sspai.com/post/52710</a></p><h2 id="命令行和软件安装默认位置"><a href="#命令行和软件安装默认位置" class="headerlink" title="命令行和软件安装默认位置"></a>命令行和软件安装默认位置</h2><p>不想再去折腾命令行了，就这么用吧</p><p>效果：</p><p>win+1 打开cmd直接默认是开始是d:</p><p>实现方法：<br>打开一个cmd 固定到底部 关闭 再打开 右键设置其属性</p><p><img src="2.png" alt="2"></p><p>软件安装的时候总是默认c，很麻烦，直接修改注册表</p><p>win+r regedit</p><p><img src="3.png" alt="2"></p><h2 id="好用软件"><a href="#好用软件" class="headerlink" title="好用软件"></a>好用软件</h2><ol><li>everything 搜索电脑文件</li><li>wox        快速启动工具，搭配everything是真的爽</li><li>ditto      复制粘贴增强，可以查看复制记录</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>换回来感觉win好像也不是不可以哦，学会了一些新的东西来帮助我管理系统，这段经历也不算白折腾，对自己的电脑必须要求强迫症，要不以后有你难受的。</p>]]></content>
      
      
      <categories>
          
          <category> note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> win </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随想_3</title>
      <link href="/2019/11/18/%E9%9A%8F%E6%83%B3-3/"/>
      <url>/2019/11/18/%E9%9A%8F%E6%83%B3-3/</url>
      
        <content type="html"><![CDATA[<p>这一段时间，自己的学习和生活都沉淀下来了，每天生活的很简单，虽然每天都很重复，但自己的精神和视野在不断丰富。</p><p>对于这种生活，还是挺享受的，俩人一起到现在，没那么多争吵，多了理解，也多了关心，天天俩人傻乐，哈哈。</p><p>多了很多想法，想去好好学英语，快速提高到能拓宽学习渠道的作用，想去好好学前端，把自己的博客维护的更好，想去好好读书，让自己的视野不仅仅局限于计算机。</p><p>世界大潮浩浩汤汤，计算机的变化更是频繁，但总会有些东西是不会改变的，我希望在提升自己专业知识的同时，不让自己的视野仅仅限于本专业，能站在更大的视野上，获得更好的成长和精神享受。</p><p>我常想去做很多事情，想学很多东西，分身乏术，杂而不精，虽然自己知道不能如此，归根到底，还是在面对困难的时候没有坚持住，Code的道路不可能是一帆风顺的。</p><p>现在我觉得，需求所引导的学习方式，是非常高效的。</p><p>拿我举例<br>因为想参加BAT的原因，我认真啃了一本算法书，认认真真写了很多看起来又臭又长的算法题，而这，是因为有个小目标在不断逼近我，即使遇到很难得问题，想跳过去，但看到往年有考，还是耐着性子看了下去，一天不行第二天看，再不行下一天，算法看明白了也就那回事，但其中理解的过程是需要去忍耐经受的。<br>我常感自己愚笨，每每看到柳神那精简的解决方法，我就感觉我的智商在被按在地上摩擦，更别说当你看完别人的代码，甚至对着敲还数据错误当时的心情了。但想着交的报名费，想着blog上立下的flag，还是耐住了性子。</p><p>此外还想提一点，写博客确实是一件对我帮助很大的事情，简单列下把，今天的感想时间太长了。</p><ul><li>个人知识体系化</li><li>有去努力把知识解释清楚的动力-&gt;认真学的清楚</li><li>记录自己的生活和感受</li></ul><p>相信最后一点，一年后的我，又是不同的心情和感受吧。<br>过去、今天、未来。<br>这里便是我的<strong>时光机</strong>。</p>]]></content>
      
      
      <categories>
          
          <category> life </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PAT-1020</title>
      <link href="/2019/11/17/PAT-1020/"/>
      <url>/2019/11/17/PAT-1020/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>Tree Traversals<br><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805485033603072" target="_blank" rel="noopener">https://pintia.cn/problem-sets/994805342720868352/problems/994805485033603072</a></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>由后序遍历序列和中序遍历序列，构建树，再输出层序遍历序列</p><p>值得注意的是，必须要有中序序列，因为这个是用来分析左右子树的</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">40</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    Node* lchild;</span><br><span class="line">    Node* rchild;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> pre[maxn],in[maxn],post[maxn];</span><br><span class="line"><span class="keyword">int</span> n;<span class="comment">//结点个数</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line"></span><br><span class="line"><span class="comment">//当前二叉树的后序序列区间为[postL,postR],中序序列区间为[inL,inR]</span></span><br><span class="line"><span class="comment">//ceate函数返回构建出来的二叉树的根结点地址</span></span><br><span class="line"><span class="function">Node* <span class="title">create</span><span class="params">(<span class="keyword">int</span> postL,<span class="keyword">int</span> postR,<span class="keyword">int</span> inL,<span class="keyword">int</span> inR)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(postL&gt;postR)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Node* root=<span class="keyword">new</span> Node;</span><br><span class="line">    root-&gt;data=post[postR];</span><br><span class="line">    <span class="keyword">int</span> k;</span><br><span class="line">    <span class="keyword">for</span>(k=inL;k&lt;=inR;k++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(in[k]==post[postR])&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> numLeft=k-inL;<span class="comment">//左子树结点的个数</span></span><br><span class="line">    <span class="comment">//递归左子树</span></span><br><span class="line">    root-&gt;lchild=create(postL,postL+numLeft<span class="number">-1</span>,inL,k<span class="number">-1</span>);</span><br><span class="line">    <span class="comment">//递归右子树</span></span><br><span class="line">    root-&gt;rchild=create(postL+numLeft,postR<span class="number">-1</span>,k+<span class="number">1</span>,inR);</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(Node* root)</span></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;Node*&gt; q;</span><br><span class="line">    q.push(root);</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">        Node *now=q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        ans.push_back(now-&gt;data);</span><br><span class="line">        <span class="keyword">if</span>(now-&gt;lchild!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">            q.push(now-&gt;lchild);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(now-&gt;rchild!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">            q.push(now-&gt;rchild);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;post[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;in[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    Node* root=create(<span class="number">0</span>,n<span class="number">-1</span>,<span class="number">0</span>,n<span class="number">-1</span>);</span><br><span class="line">    bfs(root);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>,ans[i]);</span><br><span class="line">        <span class="keyword">if</span>(i!=n<span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树 </tag>
            
            <tag> bfs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Listening-training</title>
      <link href="/2019/11/17/Listening-training/"/>
      <url>/2019/11/17/Listening-training/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>为了训练听力，培养听感，决定有计划的看英文视频来培养听力<br>在此记录，方便学习和复习</p><h2 id="实行"><a href="#实行" class="headerlink" title="实行"></a>实行</h2><h3 id="TED"><a href="#TED" class="headerlink" title="TED"></a>TED</h3><ol><li>191117 <a href="https://www.ted.com/talks/susan_david_the_gift_and_power_of_emotional_courage/transcript?rid=LfhwKSO0QOZm#t-261506" target="_blank" rel="noopener">The gift and power of emotional courage</a></li></ol><h3 id="YouTobe"><a href="#YouTobe" class="headerlink" title="YouTobe"></a>YouTobe</h3><ol><li>191117 <a href="https://www.youtube.com/playlist?list=PL8dPuuaLjXtO65LeD2p4_Sb5XQ51par_b" target="_blank" rel="noopener">Artificial Intelligence</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> english </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>迷宫问题</title>
      <link href="/2019/11/16/%E8%BF%B7%E5%AE%AB%E9%97%AE%E9%A2%98/"/>
      <url>/2019/11/16/%E8%BF%B7%E5%AE%AB%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>n m<br>*为障碍<br>起始点 目标点</p><p>输入</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5 5</span><br><span class="line">.....</span><br><span class="line">.*.*.</span><br><span class="line">.*.*.</span><br><span class="line">.***.</span><br><span class="line">....*</span><br><span class="line">2 2 4 3</span><br></pre></td></tr></table></figure><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>练习dfs&amp;bfs用</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x,y;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">step</span>;</span><br><span class="line">&#125;s,t,node;<span class="comment">//s起点,t目标,node临时</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">char</span> <span class="built_in">map</span>[maxn][maxn];</span><br><span class="line"><span class="keyword">bool</span> inq[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> X[]=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> Y[]=&#123;<span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">judge</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;=<span class="number">0</span> &amp;&amp; x&lt;n &amp;&amp; y&gt;=<span class="number">0</span> &amp;&amp; y&lt;m &amp;&amp; inq[x][y]==<span class="literal">false</span> &amp;&amp; <span class="built_in">map</span>[x][y]!=<span class="string">'*'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;Node&gt; q;</span><br><span class="line">    q.push(s);</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">        Node top = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">if</span>(top.x==t.x &amp;&amp; top.y==t.y)&#123;</span><br><span class="line">            <span class="keyword">return</span> top.<span class="built_in">step</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> nx=top.x+X[i];</span><br><span class="line">            <span class="keyword">int</span> ny=top.y+Y[i];</span><br><span class="line">            <span class="keyword">if</span>(judge(nx,ny))&#123;</span><br><span class="line">                node.x=nx;</span><br><span class="line">                node.y=ny;</span><br><span class="line">                node.<span class="built_in">step</span>=top.<span class="built_in">step</span>+<span class="number">1</span>;</span><br><span class="line">                q.push(node);</span><br><span class="line">                inq[nx][ny]=<span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,<span class="built_in">map</span>[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>,&amp;s.x,&amp;s.y,&amp;t.x,&amp;t.y);</span><br><span class="line">    s.<span class="built_in">step</span>=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,bfs());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>连通块个数</title>
      <link href="/2019/11/16/%E8%BF%9E%E9%80%9A%E5%9D%97%E4%B8%AA%E6%95%B0/"/>
      <url>/2019/11/16/%E8%BF%9E%E9%80%9A%E5%9D%97%E4%B8%AA%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给出一个n*m的矩阵，如果1在四个方向（上下左右）是相连的，那么为一个联通块，求图中联通块的个数</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>用来练习dfs和bfs的基础使用</p><p>注意bfs是标记入队</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>bfs</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100</span>;<span class="comment">//设置数据规模</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x,y;</span><br><span class="line">    <span class="keyword">bool</span> flag;</span><br><span class="line">&#125;node;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;<span class="comment">// 需要直到几行几列</span></span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[maxn][maxn];<span class="comment">//存放地图数据</span></span><br><span class="line"><span class="keyword">bool</span> inq[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> X[]=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> Y[]=&#123;<span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">in</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;=<span class="number">0</span> &amp;&amp; x&lt;n &amp;&amp; y&gt;=<span class="number">0</span> &amp;&amp; y&lt;m;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">go</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">map</span>[x][y]==<span class="number">1</span> &amp;&amp; inq[x][y]==<span class="literal">false</span> &amp;&amp; in(x,y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;Node&gt; q;</span><br><span class="line">    node.x=x;</span><br><span class="line">    node.y=y;</span><br><span class="line">    q.push(node);</span><br><span class="line">    inq[x][y]=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">         Node top=q.front();</span><br><span class="line">         q.pop();</span><br><span class="line">         <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;<span class="comment">//四个方向</span></span><br><span class="line">            <span class="keyword">int</span> nx=top.x+X[i];</span><br><span class="line">            <span class="keyword">int</span> ny=top.y+Y[i];</span><br><span class="line">            <span class="keyword">if</span>(go(nx,ny))&#123;</span><br><span class="line">                node.x=nx;</span><br><span class="line">                node.y=ny;</span><br><span class="line">                q.push(node);</span><br><span class="line">                inq[nx][ny]=<span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;<span class="comment">//输入地图</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;<span class="built_in">map</span>[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;<span class="comment">//输入地图</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(go(i,j))&#123;</span><br><span class="line">                bfs(i,j);</span><br><span class="line">                ans++;</span><br><span class="line">                <span class="comment">// cout&lt;&lt;i&lt;&lt;"  "&lt;&lt;j&lt;&lt;endl;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>dfs</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100</span>;<span class="comment">//设置数据规模</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;<span class="comment">// 需要直到几行几列</span></span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[maxn][maxn];<span class="comment">//存放地图数据</span></span><br><span class="line"><span class="keyword">bool</span> vis[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> X[]=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> Y[]=&#123;<span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">in</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;=<span class="number">0</span> &amp;&amp; x&lt;n &amp;&amp; y&gt;=<span class="number">0</span> &amp;&amp; y&lt;m;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">go</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">map</span>[x][y]==<span class="number">1</span> &amp;&amp; vis[x][y]==<span class="literal">false</span> &amp;&amp; in(x,y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    vis[x][y]=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> nx=x+X[i];</span><br><span class="line">        <span class="keyword">int</span> ny=y+Y[i];</span><br><span class="line">        <span class="keyword">if</span>(go(nx,ny))&#123;</span><br><span class="line">            dfs(nx,ny);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;<span class="comment">//输入地图</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;<span class="built_in">map</span>[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(go(i,j))&#123;</span><br><span class="line">                dfs(i,j);</span><br><span class="line">                ans++;</span><br><span class="line">                <span class="comment">// cout&lt;&lt;i&lt;&lt;"  "&lt;&lt;j&lt;&lt;endl;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT-1052</title>
      <link href="/2019/11/16/PAT-1052/"/>
      <url>/2019/11/16/PAT-1052/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>Linked List Sorting<br><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805425780670464" target="_blank" rel="noopener">https://pintia.cn/problem-sets/994805342720868352/problems/994805425780670464</a></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>静态链表<br>常规题目<br>算法步骤</p><ol><li>创建静态链表</li><li>初始化静态链表</li><li>由初始结点遍历链表，进行访问标记，计数cnt</li><li>sort把有用的放前面，再进行相关操作</li></ol><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x,cnt;</span><br><span class="line">&#125;fac[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> prime[maxn],pNum;</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"><span class="keyword">int</span> n,nFac=<span class="number">0</span>;<span class="comment">//输入数字，因子种类个数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">findP</span><span class="params">()</span></span>&#123;<span class="comment">//创建素数表</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;maxn;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(vis[i]==<span class="literal">false</span>)&#123;</span><br><span class="line">            prime[pNum++]=i;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i*<span class="number">2</span>;i&lt;maxn;j+=i)&#123;</span><br><span class="line">                vis[j]=<span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d="</span>,n);</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    findP();<span class="comment">//打表</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;pNum;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(n%prime[i]==<span class="number">0</span>)&#123;</span><br><span class="line">            fac[nFac].x=prime[i];</span><br><span class="line">            fac[nFac].cnt=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(n%prime[i]==<span class="number">0</span>)&#123;</span><br><span class="line">                fac[nFac].cnt++;</span><br><span class="line">                n/=prime[i];</span><br><span class="line">            &#125;</span><br><span class="line">            nFac++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nFac;i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>,fac[i].x);</span><br><span class="line">        <span class="keyword">if</span>(fac[i].cnt!=<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"^%d"</span>,fac[i].cnt);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i!=nFac<span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"*"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>去南京</title>
      <link href="/2019/11/15/%E5%8E%BB%E5%8D%97%E4%BA%AC/"/>
      <url>/2019/11/15/%E5%8E%BB%E5%8D%97%E4%BA%AC/</url>
      
        <content type="html"><![CDATA[<p>我和凝凝去南京玩啦<br><img src="2.png" alt="2"><br><img src="1.png" alt="2"></p>]]></content>
      
      
      <categories>
          
          <category> life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> travel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT-1032</title>
      <link href="/2019/11/15/PAT-1032/"/>
      <url>/2019/11/15/PAT-1032/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>Sharing<br><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805460652113920" target="_blank" rel="noopener">https://pintia.cn/problem-sets/994805342720868352/problems/994805460652113920</a></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>通过第一个首地址走完，并标记走过的<br>再从第二个首地址开始走，只要遇到标记就说明这个是suffix</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> st1,st2;</span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> date;</span><br><span class="line">    <span class="keyword">int</span> next;</span><br><span class="line">    <span class="keyword">bool</span> flag;</span><br><span class="line">&#125;node[maxn];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;st1,&amp;st2,&amp;N);</span><br><span class="line">    <span class="keyword">int</span> adress,next;</span><br><span class="line">    <span class="keyword">char</span> date;</span><br><span class="line">    <span class="keyword">while</span>(N--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %c %d"</span>,&amp;adress,&amp;date,&amp;next);</span><br><span class="line">        node[adress]=&#123;date,next,<span class="literal">false</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=st1;i!=<span class="number">-1</span>;i=node[i].next)&#123;</span><br><span class="line">        node[i].flag=<span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=st2;i!=<span class="number">-1</span>;i=node[i].next)&#123;</span><br><span class="line">        <span class="keyword">if</span>(node[i].flag)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%05d"</span>,i);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT-1059</title>
      <link href="/2019/11/15/PAT-1059/"/>
      <url>/2019/11/15/PAT-1059/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>Prime Factors<br><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805415005503488" target="_blank" rel="noopener">https://pintia.cn/problem-sets/994805342720868352/problems/994805415005503488</a></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>典型，学习</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x,cnt;</span><br><span class="line">&#125;fac[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> prime[maxn],pNum;</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"><span class="keyword">int</span> n,nFac=<span class="number">0</span>;<span class="comment">//输入数字，因子种类个数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">findP</span><span class="params">()</span></span>&#123;<span class="comment">//创建素数表</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;maxn;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(vis[i]==<span class="literal">false</span>)&#123;</span><br><span class="line">            prime[pNum++]=i;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i*<span class="number">2</span>;i&lt;maxn;j+=i)&#123;</span><br><span class="line">                vis[j]=<span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d="</span>,n);</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    findP();<span class="comment">//打表</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;pNum;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(n%prime[i]==<span class="number">0</span>)&#123;</span><br><span class="line">            fac[nFac].x=prime[i];</span><br><span class="line">            fac[nFac].cnt=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(n%prime[i]==<span class="number">0</span>)&#123;</span><br><span class="line">                fac[nFac].cnt++;</span><br><span class="line">                n/=prime[i];</span><br><span class="line">            &#125;</span><br><span class="line">            nFac++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nFac;i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>,fac[i].x);</span><br><span class="line">        <span class="keyword">if</span>(fac[i].cnt!=<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"^%d"</span>,fac[i].cnt);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i!=nFac<span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"*"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT </tag>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>H和T的成长回忆录</title>
      <link href="/2019/11/14/H%E5%92%8CT%E7%9A%84%E6%88%90%E9%95%BF%E5%9B%9E%E5%BF%86%E5%BD%95/"/>
      <url>/2019/11/14/H%E5%92%8CT%E7%9A%84%E6%88%90%E9%95%BF%E5%9B%9E%E5%BF%86%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p>相识于计协<br>第一次合唱纸短情长<br>第一次约会<br>第一次一同看电影<br>第一次一起过圣诞节<br>第一次吃凝凝削好的水果<br>第一次的情人节<br>第一次一同坐火车<br>一起吃手扒鸡<br>一起唱歌<br>一起读书<br>一起敲代码<br>太多太多美好的时光<br>是你让我相信，美好的爱情真的能让彼此更好!</p>]]></content>
      
      
      <categories>
          
          <category> life </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>热爱生命</title>
      <link href="/2019/11/14/%E7%83%AD%E7%88%B1%E7%94%9F%E5%91%BD/"/>
      <url>/2019/11/14/%E7%83%AD%E7%88%B1%E7%94%9F%E5%91%BD/</url>
      
        <content type="html"><![CDATA[<p>20190505是怎样的一天呢？<br>失眠到接近三点入睡，早晨六点多就自己醒来，睡不着，就在床上乱想，好的坏的，开心的，伤心的都一股脑地在脑海中游荡，到七点，听着室友闹铃想起，感受到这新的一天的开始，也是我新生活的开始，身体不由得来了力量，穿上衣服，就去跑步了，听着歌曲，心中感受到了过去澎湃在心中的力量，踏着china的鼓点，我跑啊跑，跑啊跑……<br>中午吃饭，听着旁边的女生对着手机里抱怨，耳机声音放大，但依然烦躁，突然眼圈发热，看看桌上满是蔬菜的午饭，我发起了呆<br>没缘由的，上着数据结构，听着P、K算法，拓扑排序，就觉得好想她，真的好想她，好想，好想，再也忍不住了，但我又能做什么呢，只能借眼泪来宽慰自己<br>下午下课后先去实验室敲了一会代码，先国陪我一起吃了晚饭，他也不吃，就坐在那里和我瞎扯，我心里由衷的感动，先国，你真好，我不会秀啥表达，只想说你真好，关心了我的胃病，聊了聊跑步，一起买了一盆小植物回来。<br>回寝坐了一会儿就去实验室了，这里电脑蓝牙出了一些问题，整了接近一个小时还没解决，BIOS信息找不到，心情烦躁，但敲了一会代码心情就好了…这里看着感觉怪怪的。<br>晚上意外停电，锁门，和她一同回去，她在前面跑，我在后面跟，可是那条路太短了，我感觉她今晚很开心，我也很开心，离开后，她给我分享了好喜欢你，尽管还是没啥话，但心里暖多了<br>写了六段，哭了四次，镜子就摆在旁边，我可算见明白了我是啥样子，傻样子。<br>我意识到爱是会伤人的，尤其是在我不够成熟的时候，为了她，我需要克制的想，克制的爱。<br>真希望我们俩都能快点好起来，我也会努力不虚度今后的时光。<br>最后，汪国真的热爱生命，来结束这50分钟的文章。<br>热爱生命<br>我不去想，<br>是否能够成功 ，<br>既然选择了远方 ，<br>便只顾风雨兼程。<br>我不去想，<br>能否赢得爱情 ，<br>既然钟情于玫瑰 ，<br>就勇敢地吐露真诚 。<br>我不去想，<br>身后会不会袭来寒风冷雨 ，<br>既然目标是地平线，<br>留给世界的只能是背影 。<br>我不去想，<br>未来是平坦还是泥泞 ，<br>只要热爱生命 ，<br>一切，都在意料之中。<br><img src="1.png" alt="2"></p>]]></content>
      
      
      <categories>
          
          <category> life </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>blog分类规划</title>
      <link href="/2019/11/14/blog%E5%88%86%E7%B1%BB%E8%A7%84%E5%88%92/"/>
      <url>/2019/11/14/blog%E5%88%86%E7%B1%BB%E8%A7%84%E5%88%92/</url>
      
        <content type="html"><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>学习方面</p><ol><li>记录刷题过程与其中思考</li><li>记录阅读笔记</li><li>记录IT各个领域学习</li></ol><p>生活方面</p><ol><li>写一些个人感想</li><li>规划生活，立flag</li><li>记录生活中的美好</li></ol><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>大量内容集中在算法学习，因为要刷一堆题，我都会放进来<br>所以关于刷题方面，单独设置分类，其相关的阅读和技巧整理也放进来</p><p>无论是学git还是学语言，都放到一个方面，分起来太费事了，利用标签分开</p><p>生活分类就放生活的就行，也不多，标签标记是干嘛的就行</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>分类三级</p><ul><li>code</li><li>note</li><li>life</li></ul><p>其中各个不同的内容用tag去分开,尽量用英文,全小写，不纠结</p>]]></content>
      
      
      <categories>
          
          <category> life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> plan </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随想-2</title>
      <link href="/2019/11/14/%E9%9A%8F%E6%83%B3-2/"/>
      <url>/2019/11/14/%E9%9A%8F%E6%83%B3-2/</url>
      
        <content type="html"><![CDATA[<p>近日，有些感想，于此处记录与再思考<br>骑着小电动车，四十多分钟的路程，终于到了中科大，从辐射实验区进入，映入眼帘的是各种国家级实验室，建筑都没有很高，但却依然让人心怀敬意，这算是我第一次进入别人家的大学，整个人的心的变得小心谨慎起来。<br>进入淮北，来到淮北师范大学，回想这将近一年的学习生活，我感觉自己并没有收获自己想要的成长，并不是说这一年是荒废的，相反，我深感它的值得，遇到陶书凝，彼此有摩擦，有快乐，有共同对未来的向往，我变得更愿意去理解和体会他人，内心也变得更热爱生活，但在学习与个人发展的视角来看，我虽然看起来努力学习专业知识，常常去实验室，但想法困于大学之前的认识，对未来模糊，迷茫，也不知如何坚定.<br>我时常担心自己做不好，于是，在第一次504招新的时候我选择了退却，尽管感觉那是个不错的地方，自己很想去，但却找了一堆理由没去参赛。事实上，即使当时还有些腿伤，是不影响走过去参赛的，那场比赛结束后，我内心松了口气，但也惋惜和自责.<br>这里的环境犹如温水，我时常告诉自己不要把视角局限于学校，要把眼光放长远，可缺少实际的体验与接触，那种自我告诫只能变为有时候自谦的表达，虽然我并没因此而骄傲什么，但我的自我懈怠是确实存在的，我不知道自己想变成什么样，也不知道自己要去坚持什么。<br>这些问题在如今依然存在，如此的迷茫的存在从逻辑上思考来看是再正常不过的，但我要去明确在如此状况下如何对待自己。</p><ol><li>不要颓废生活，平衡好学习，情感，娱乐。</li><li>从心理上要相信自己是个大佬，采用积极的心理策略。</li><li>扩充自己的眼界，比赛是方式之一，除此之外，要积极寻求于外界产生连接交互的渠道，视野不能闭塞。</li></ol><p>我又突然感觉迷茫大可不必，没人能说未来一定怎样，不说五年，明天的你已经不是今天的你。身体在新陈代谢，想法在动态变化，突然想到动态规划思想，把视角局限于当前阶段，实现局部最优解，努力过好现在的生活，让她，也让自己开心点。<br>希望今日的选择能给予未来更多的选择生活的权力，而不是生活选择你。嘻嘻<br>:)<br><img src="1.png" alt="2"></p>]]></content>
      
      
      <categories>
          
          <category> life </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>随想-1</title>
      <link href="/2019/11/14/%E9%9A%8F%E6%83%B3-1/"/>
      <url>/2019/11/14/%E9%9A%8F%E6%83%B3-1/</url>
      
        <content type="html"><![CDATA[<p>总感觉要写点什么，第一次在凌晨的大街上睡着，拖着酸麻的脚回寝室，近三点，本以为要被锁在门外，还好室友没睡，开了门。<br>这一觉比自己想象的要踏实，就在写下这些的我刚刚还觉得没什么，现在却忍不住了，我想起自己一个人提着行李，坐在火车上。也是接近3点的时间，鼻涕弄脏了整个口罩，直到哭不出来。<br>罢了，想写的时候再继续吧。<br>怎样都是生活的一部分，经历，体验</p>]]></content>
      
      
      <categories>
          
          <category> life </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>北京游感</title>
      <link href="/2019/11/14/%E5%8C%97%E4%BA%AC%E6%B8%B8%E6%84%9F/"/>
      <url>/2019/11/14/%E5%8C%97%E4%BA%AC%E6%B8%B8%E6%84%9F/</url>
      
        <content type="html"><![CDATA[<p>就着蓝桥杯国赛的机会，来了趟北京，中国的首都，现在坐在国家图书馆，感觉心静了下来，借此机会，写写这一段的想法。<br>先大致记录下整个过程：周五早上在学校门口打车到火车站，高铁，地铁，汽车，到格林豪泰，吃饭后睡了一觉晚上就出去玩了，出去玩这段过程还用视频的形式记录下来的，回头把视频搞一搞，先去了天安门，逛了逛附近的步行街，之后坐车去南锣鼓巷，之后坐地铁回去，但去错地方了，想回北方工业大学，地图搜索的时候搜成了北京工业大学。直到出地铁站买完水果我才发现去错地方了。一个在最东边，一个在最西边。返程，坐过了。还记得当时23：12，我就坐在地铁站门前，感觉不想动了，当时地铁停了，公交也停了，打出租回去接近90，我果断放弃，去附近凑合住了一晚。这一路走了将近一个小时，凝凝就这么一直陪着我，给我鼓气，真正住下来已经接近一点了，在居民楼里，房租77，在沙发上躺着过了一夜，早上去了北大校园，混了进去，把整个校园逛了逛，九点半，发现没带头套，又返程去拿，匆匆忙忙赶回酒店，躺下睡了半个小时，出门比赛。其实我就写了两个小时，剩下基本在发呆…题目很多不会，最后实在无聊，我就把面包给吃了QAQ，考的我有些郁闷，回酒店躺床上玩了会儿就睡了，第二天早上打车去北大体育场，我应该是被忽悠了，我现在觉得蓝桥挺厉害的，请来了五位企业的人来讲话，华为，科大，小鹏，美团，基金（忘记名字了）。一场下来感觉挺触动的，也突然感慨能现场听到这些牛人分享。<br>逛了逛别的学校，我想想自己的高考，觉得还是挺后悔的，但对于那段时期的我，我也能理解，以过来人的身份评价过去没有什么价值，困于那个时期的我，让我再来一次，估计也一样吧。现在很庆幸大一做出的种种选择，你会发现不知不觉间，你的视野就被限制了，不是说我颓废啥的，只是，有时你不进步，那便是退步，看到更多，才发觉自己差的有多远，此时的状态切忌心浮气躁，要把心沉下来，好好学习，好好做事，有进度，有计划的安排自己的学习，算法还是要学，不但要学，还要认真学，难是正常的，不难才是不正常的，难的东西才有门槛，才具有更高的竞争价值。对于应用型专业来讲，不知道方向便去看招聘，5G,人工智能，时代是加速发展的，武装自己，借势而行</p>]]></content>
      
      
      <categories>
          
          <category> life </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PAT-1101</title>
      <link href="/2019/11/14/PAT-1101/"/>
      <url>/2019/11/14/PAT-1101/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>Quick Sort<br><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805366343188480" target="_blank" rel="noopener">https://pintia.cn/problem-sets/994805342720868352/problems/994805366343188480</a></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>硬编码超时QAQ<br>如果此变量满足 pivot的条件，那么它所在的位置就是排序后应该所在的位置<br>位置定了，但是还要要求左边没有比这个元素更大的元素</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,cnt,maxx;</span><br><span class="line"><span class="keyword">int</span> ans[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a(n),b(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">        b[i]=a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    sort(a.<span class="built_in">begin</span>(),a.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i]==b[i] &amp;&amp; b[i]&gt;maxx)&#123;</span><br><span class="line">            ans[cnt++]=b[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(b[i]&gt;maxx)&#123;</span><br><span class="line">            maxx=b[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,cnt);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i!=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>,ans[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT-1069</title>
      <link href="/2019/11/14/PAT-1069/"/>
      <url>/2019/11/14/PAT-1069/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>The Black Hole of Numbers<br><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805400954585088" target="_blank" rel="noopener">https://pintia.cn/problem-sets/994805342720868352/problems/994805400954585088</a></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>简单</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a&gt;b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="keyword">int</span> arr1[<span class="number">5</span>],arr2[<span class="number">5</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;<span class="comment">//取出数字中的每一位</span></span><br><span class="line">            arr1[i]=arr2[i]=n%<span class="number">10</span>;</span><br><span class="line">            n/=<span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(arr1,arr1+<span class="number">4</span>,cmp);<span class="comment">//从大到小</span></span><br><span class="line">        sort(arr2,arr2+<span class="number">4</span>);<span class="comment">//从小到大</span></span><br><span class="line">        <span class="keyword">int</span> n1=<span class="number">0</span>,n2=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">            n1=n1*<span class="number">10</span>+arr1[i];<span class="comment">//大</span></span><br><span class="line">            n2=n2*<span class="number">10</span>+arr2[i];<span class="comment">//小</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%04d - %04d = %04d\n"</span>,n1,n2,n1-n2);</span><br><span class="line">        n=n1-n2;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">0</span> || n==<span class="number">6174</span>)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT-1093</title>
      <link href="/2019/11/14/PAT-1093/"/>
      <url>/2019/11/14/PAT-1093/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>Count PAT’s<br><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805373582557184" target="_blank" rel="noopener">https://pintia.cn/problem-sets/994805342720868352/problems/994805373582557184</a></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>sum(每个A左右P的数量*T的数量)<br>注意多次取moded</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> LL mode = <span class="number">1000000007L</span>L;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Position</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> p,t;<span class="comment">//'P'和'T'的数量</span></span><br><span class="line">&#125;pos[maxn];</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> str[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,str);</span><br><span class="line">    <span class="keyword">int</span> np=<span class="number">0</span>,nt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> len=<span class="built_in">strlen</span>(str);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(str[i]==<span class="string">'P'</span>)&#123;</span><br><span class="line">            np++;</span><br><span class="line">        &#125;</span><br><span class="line">        pos[i].p=np;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=len<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">        <span class="keyword">if</span>(str[i]==<span class="string">'T'</span>)&#123;</span><br><span class="line">            nt++;</span><br><span class="line">        &#125;</span><br><span class="line">        pos[i].t=nt;</span><br><span class="line">    &#125;</span><br><span class="line">    LL ans=<span class="number">0L</span>L;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(str[i]==<span class="string">'A'</span>)&#123;</span><br><span class="line">            ans=(ans+(pos[i].t*pos[i].p)%mode)%mode;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT </tag>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT-1025</title>
      <link href="/2019/11/13/PAT-1025/"/>
      <url>/2019/11/13/PAT-1025/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>PAT Ranking<br><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805474338127872" target="_blank" rel="noopener">https://pintia.cn/problem-sets/994805342720868352/problems/994805474338127872</a></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>主要是运用sort结构体和一些相关技巧<br>本地排序在一组输入结束后直接算出来</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Strudent</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> id[<span class="number">20</span>];</span><br><span class="line">    <span class="keyword">int</span> socre;</span><br><span class="line">    <span class="keyword">int</span> location;</span><br><span class="line">    <span class="keyword">int</span> finalRank;</span><br><span class="line">    <span class="keyword">int</span> localRank;</span><br><span class="line">&#125;stu[<span class="number">30010</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Strudent a,Strudent b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a.socre!=b.socre)&#123;</span><br><span class="line">        <span class="keyword">return</span> a.socre&gt;b.socre;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">strcmp</span>(a.id,b.id)&lt;<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">int</span> index=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;<span class="comment">//场地编号[1,n]</span></span><br><span class="line">        <span class="keyword">int</span> k;<span class="comment">//人数</span></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;k);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;k;j++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s%d"</span>,stu[index].id,&amp;stu[index].socre);</span><br><span class="line">            stu[index].location=i;</span><br><span class="line">            index++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> <span class="built_in">begin</span>=index-k,<span class="built_in">end</span>=index;</span><br><span class="line">        sort(stu+<span class="built_in">begin</span>,stu+<span class="built_in">end</span>,cmp);</span><br><span class="line">        stu[<span class="built_in">begin</span>].localRank=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;k;j++)&#123;<span class="comment">//本地排序</span></span><br><span class="line">            <span class="keyword">if</span>(stu[<span class="built_in">begin</span>+j].socre==stu[<span class="built_in">begin</span>+j<span class="number">-1</span>].socre)&#123;</span><br><span class="line">                stu[<span class="built_in">begin</span>+j].localRank=stu[<span class="built_in">begin</span>+j<span class="number">-1</span>].localRank;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                stu[<span class="built_in">begin</span>+j].localRank=j+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(stu,stu+index,cmp);</span><br><span class="line">    stu[<span class="number">0</span>].finalRank=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;index;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(stu[i].socre==stu[i<span class="number">-1</span>].socre)&#123;</span><br><span class="line">            stu[i].finalRank=stu[i<span class="number">-1</span>].finalRank;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            stu[i].finalRank=i+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,index);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;index;i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%s %d %d %d\n"</span>,stu[i].id,stu[i].finalRank,stu[i].location,stu[i].localRank);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT </tag>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git学习</title>
      <link href="/2019/11/07/git%E5%AD%A6%E4%B9%A0/"/>
      <url>/2019/11/07/git%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="Git简介"><a href="#Git简介" class="headerlink" title="Git简介"></a>Git简介</h2><h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h3><p>用C写的分布式版本控制系统</p><h3 id="分布式版本控制系统"><a href="#分布式版本控制系统" class="headerlink" title="分布式版本控制系统"></a>分布式版本控制系统</h3><p>每个人都是一个完整的版本库，现实场景下为了方便大家的交换大家的修改，有一个中央服务器的电脑，但如果这服务器崩了，找一个最新的本地代码同步上去即可，之前所有的提交历史记录都可以看到</p><h2 id="工作区和暂存区"><a href="#工作区和暂存区" class="headerlink" title="工作区和暂存区"></a>工作区和暂存区</h2><p>工作区就是我们正常写文件的地方，比如图中建立了一个名为learngit的文件夹，并用git对其进行管理<br><img src="1.png" alt="2"><br>其中，除了隐藏文件夹 <strong>.git</strong> 以外的文件或者文件夹，都属于工作区</p><p><strong>.git</strong>文件，是git的版本库(Repository),其目录结构如下图所示<br><img src="2.png" alt="2"><br>git的的版本库中存了很多东西，最重要的称为stage（或者叫index）的缓存区，还有git为我们自动创建的第一个分支master<br><img src="0.jpg" alt="2"><br>我们往git的版本库中添加文件，有两个执行步骤</p><ol><li>git add把文件添加进去，实际上是把文件修改增添到缓存区</li><li>git commit提交更改，实际上就是把我们暂存区的所有内容提交到当前分支</li></ol><p>因为我们创建git版本库时，git自动为我们创建了唯一一个master分支，所以，现在，git commit就是往master分支上提交更改</p><h2 id="版本管理相关操作"><a href="#版本管理相关操作" class="headerlink" title="版本管理相关操作"></a>版本管理相关操作</h2><h3 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h3><p>在所要管理的文件夹中</p><figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#版本库初始化</span></span><br><span class="line">git init</span><br><span class="line"></span><br><span class="line"><span class="comment">#把所有文件增添到缓存区</span></span><br><span class="line">git add .</span><br><span class="line"></span><br><span class="line"><span class="comment">#提交更改</span></span><br><span class="line">git commit -m <span class="string">"why or what"</span></span><br></pre></td></tr></table></figure><h3 id="版本管理"><a href="#版本管理" class="headerlink" title="版本管理"></a>版本管理</h3><figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看当前仓库的状态</span></span><br><span class="line">git status</span><br><span class="line"></span><br><span class="line"><span class="comment">#版本回退</span></span><br><span class="line">git reset --hard HEAD^</span><br><span class="line"><span class="comment">#HEAD表示当前版本，上上个版本是HEAD^^</span></span><br><span class="line"></span><br><span class="line">git <span class="built_in">log</span></span><br><span class="line"><span class="comment">#git log显示从最近到最远的提交日志</span></span><br><span class="line"><span class="comment">#如果回到前面的版本，HEAD的只想也默认转移</span></span><br></pre></td></tr></table></figure><p><img src="3.png" alt="2"></p><figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">git reflog</span><br><span class="line"><span class="comment">#记录每一次提交命令</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#这样就可以根据指定的commit id回来了</span></span><br><span class="line">git reset --hard commit_id</span><br></pre></td></tr></table></figure><h3 id="修改管理"><a href="#修改管理" class="headerlink" title="修改管理"></a>修改管理</h3><figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">git checkout -- file_name</span><br></pre></td></tr></table></figure><p>此命令的意思是，把文件在工作区的修改全部撤销掉，这里有两种情况</p><ol><li><p>没有add添加到暂存区，那么撤销修改就回到当前版本库中的状态</p></li><li><p>已经add到暂存区，那么，撤销修改就回到暂存区中的状态</p></li></ol><p>总之</p><ul><li>操作撤回对象是工作区的文件</li><li>回到最近一次commit or add 的状态</li></ul><figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">git reset HEAD file_name</span><br></pre></td></tr></table></figure><p>git reset命令既可以回退版本，也可以把暂存区的修改回退到工作区，HEAR表示最新版本<br>这种方法针对于add后没有submit的情况，把暂存区的修改撤销掉，但是工作区的修改仍然存在，现在要丢掉工作区的修改</p><figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">git checkout -- file_name</span><br></pre></td></tr></table></figure><h3 id="删除管理"><a href="#删除管理" class="headerlink" title="删除管理"></a>删除管理</h3><p>删除了工作区的文件，此时与版本库不一致，此时你有两个选择，</p><p>1.确实要从版本库汇总删除该文件</p><figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">rm file_name</span><br><span class="line">git rm file_name</span><br><span class="line">git commit -m <span class="string">"why or what"</span></span><br></pre></td></tr></table></figure><p>2.删除错了,进行恢复</p><figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">git checkout -- file_name</span><br></pre></td></tr></table></figure><h2 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h2><h3 id="添加远程仓库"><a href="#添加远程仓库" class="headerlink" title="添加远程仓库"></a>添加远程仓库</h3><p>目的：实现远程仓库备份和多人协作</p><p>github上新建一个Repository,利用其ssh</p><figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">git remote add origin repo_ssh</span><br></pre></td></tr></table></figure><p>添加后，远程仓库的名字就是<strong>origin</strong>,这是约定俗成的，不强制</p><p>下一步，就可以把本地库的所有内容推送到远程库上</p><figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><p>把本地仓库推送到远程,用git push命令，相当于把当前分支master推送到远程。</p><p>由于远程是空的，我们第一次推送分支时，加了 -u 参数，这样远程和本地就建立了关联，为以后的推送或者拉取简化命令</p><figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure><h3 id="从远程仓库克隆"><a href="#从远程仓库克隆" class="headerlink" title="从远程仓库克隆"></a>从远程仓库克隆</h3><p>很简单，在网页中复制ssh</p><figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> 复制的ssh</span><br></pre></td></tr></table></figure><p>如果想clone到指定目录</p><figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> 复制的ssh 指定目录</span><br></pre></td></tr></table></figure><p>如下图<br><img src="4.png" alt="2"></p>]]></content>
      
      
      <categories>
          
          <category> note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT-1114</title>
      <link href="/2019/11/06/PAT-1114/"/>
      <url>/2019/11/06/PAT-1114/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>Family Property<br><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805356599820288" target="_blank" rel="noopener">https://pintia.cn/problem-sets/994805342720868352/problems/994805356599820288</a></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>并查集综合运用</p><p>本题描述:</p><ol><li>给了n个人的信息</li><li>信息含括自身id，父亲id，母亲id，孩子数量，名下房产总数量，名下房产总数量</li><li>要求找出一共多少个家族（只要是亲戚就是一个家族的），每个家族的人数，每个家族的人平均房产数，平均房产面积</li><li>输出结果先输出人平均房产面积比较大的那个家族的人中id最小的id，如果相同，输出序号比较小那个</li></ol><p>思考：</p><ul><li>本题要找出有关系的群体的一些属性，按块状划分，需要利用并查集进行分块</li><li>考虑到结果需要输出整个家族中最小的id，所以在并查集建立根部的时候，优先把根部作为最小的</li><li>有很多id，我们根据四位id的特点建立总序号数组，用vis数组来判定这个id是否存在</li><li>对每个根部进行特殊标记，最后便利看有多少个根部即可</li></ul><p>还是好难啊，555</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">10000</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Data</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> id,fa,ma,num,area;</span><br><span class="line">    <span class="keyword">int</span> childs[<span class="number">5</span>];<span class="comment">//孩子的数量[0,5]</span></span><br><span class="line">&#125;data[<span class="number">1010</span>];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> id,people;</span><br><span class="line">    <span class="keyword">double</span> num,area;</span><br><span class="line">    <span class="keyword">bool</span> flag;<span class="comment">//默认为false</span></span><br><span class="line">&#125;ans[maxn];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;<span class="comment">//输入行数</span></span><br><span class="line"><span class="keyword">int</span> pre[maxn];<span class="comment">//记录上级</span></span><br><span class="line"><span class="keyword">bool</span> vis[maxn];<span class="comment">//记录这个编号的人是否存在</span></span><br><span class="line"><span class="keyword">int</span> cnt=<span class="number">0</span>;<span class="comment">//用于记录家族的数量</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Node a,Node b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a.area!=b.area)&#123;</span><br><span class="line">        <span class="keyword">return</span> a.area&gt;b.area;<span class="comment">//平均面积大的放前面</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a.id&lt;b.id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(x!=pre[x])&#123;</span><br><span class="line">        x=pre[x];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">unit</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fx=<span class="built_in">find</span>(x);</span><br><span class="line">    <span class="keyword">int</span> fy=<span class="built_in">find</span>(y);</span><br><span class="line">    <span class="comment">//让序号更小的成为根部</span></span><br><span class="line">    <span class="comment">//如果相同就没必要unit</span></span><br><span class="line">    <span class="keyword">if</span>(fx&lt;fy)&#123;</span><br><span class="line">        pre[fy]=fx;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(fy&lt;fx)&#123;</span><br><span class="line">        pre[fx]=fy;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;maxn;i++)&#123;</span><br><span class="line">        pre[i]=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;data[i].id,&amp;data[i].fa,&amp;data[i].ma);</span><br><span class="line">        <span class="keyword">int</span> k;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;k);</span><br><span class="line">        vis[data[i].id]=<span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(data[i].fa!=<span class="number">-1</span>)&#123;</span><br><span class="line">            vis[data[i].fa]=<span class="literal">true</span>;</span><br><span class="line">            unit(data[i].id,data[i].fa);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(data[i].ma!=<span class="number">-1</span>)&#123;</span><br><span class="line">            vis[data[i].ma]=<span class="literal">true</span>;</span><br><span class="line">            unit(data[i].id,data[i].ma);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;k;j++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;data[i].childs[j]);</span><br><span class="line">            vis[data[i].childs[j]]=<span class="literal">true</span>;</span><br><span class="line">            unit(data[i].childs[j],data[i].id);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;data[i].num,&amp;data[i].area);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;<span class="comment">//定位根部，统计每个家族的总房产数量和总房产面积</span></span><br><span class="line">        <span class="keyword">int</span> id=<span class="built_in">find</span>(data[i].id);</span><br><span class="line">        ans[id].id=id;</span><br><span class="line">        ans[id].num+=data[i].num;</span><br><span class="line">        ans[id].area+=data[i].area;</span><br><span class="line">        ans[id].flag=<span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;maxn;i++)&#123;<span class="comment">//算根</span></span><br><span class="line">        <span class="keyword">if</span>(vis[i])&#123;<span class="comment">//如果这个编号存在</span></span><br><span class="line">            ans[<span class="built_in">find</span>(i)].people++;<span class="comment">//找到这个编号对应的根</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(ans[i].flag)&#123;</span><br><span class="line">            cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;maxn;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ans[i].flag)&#123;</span><br><span class="line">            ans[i].num=(<span class="keyword">double</span>)(ans[i].num*<span class="number">1.0</span>/ans[i].people);</span><br><span class="line">            ans[i].area=(<span class="keyword">double</span>)(ans[i].area*<span class="number">1.0</span>/ans[i].people);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(ans,ans+maxn,cmp);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,cnt);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%04d %d %.3f %.3f\n"</span>, ans[i].id, ans[i].people, ans[i].num, ans[i].area);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT </tag>
            
            <tag> 并查集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python基础</title>
      <link href="/2019/11/06/python%E5%9F%BA%E7%A1%80/"/>
      <url>/2019/11/06/python%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h2><ol><li>标示符由字母，数字、下划线组成。</li><li>不能以数字开头</li><li>区分大小写</li><li>以下划线开头的标识符是有特殊意义的<ul><li>单下划线_foo代表不能直接访问的类的属性，需要通过类提供的接口进行访问，不能用 ‘from xxx improt *’ 而导入</li><li>以双下划线开头的 ‘__foo’代表类的私有成员</li><li>以双下划线开头和结尾的代表python里特殊方法专用的标识</li></ul></li></ol><h2 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h2><p>‘a = input()’ a的类型是字符串类型，无论输入什么</p><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>单引号，双引号又可以</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">var1 = <span class="string">'hi'</span></span><br><span class="line">var2 = <span class="string">"hello"</span></span><br></pre></td></tr></table></figure><h2 id="存储方式"><a href="#存储方式" class="headerlink" title="存储方式"></a>存储方式</h2><ul><li>列表:<ol><li>[]</li><li>增删改查</li></ol></li><li>元组<ol><li>()</li><li>只读</li></ol></li><li>集合<ol><li>{1,2,3}</li><li>元素不重复</li></ol></li><li>字典<ol><li>{key1:value,key2,value}</li><li>key要求不可变类型，用数字、字符串、元组</li><li>value要求可变类型，列表字典集合</li></ol></li></ul><p>之间的转换</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">12</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">b = set(a)</span><br><span class="line">c = list(b)</span><br><span class="line">d = tuple(a) <span class="comment">#元组</span></span><br></pre></td></tr></table></figure><h2 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h2><p>有列表’L = [‘Michael’, ‘Sarah’, ‘Tracy’, ‘Bob’, ‘Jack’]’<br>‘L[0:3]’表示从索引<strong>0</strong>开始，知道取到<strong>3</strong>为止，但是<strong>不包括</strong>3<br>如果第一个索引是0，还可以写成’L[:3]’实现<br>效果如下</p><blockquote><p>[‘Michael’, ‘Sarah’, ‘Tracy’]<br>此外，也可以倒着取<br>‘L[-2:]’<br>[‘Bob’, ‘Jack’]<br>‘L[-2,-1]’<br>[‘Bob’]<br><strong>记着倒数最后一个元素的索引是-1</strong></p></blockquote><h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><p>判断</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a = input()</span><br><span class="line"></span><br><span class="line">if a==&apos;1&apos;:</span><br><span class="line">    print(1)</span><br><span class="line">elif a==&apos;2&apos;:</span><br><span class="line">    print(4)</span><br><span class="line">elif a==&apos;3&apos;:</span><br><span class="line">    print(9)</span><br><span class="line">else:</span><br><span class="line">    print(&quot;Happy&quot;)</span><br></pre></td></tr></table></figure><p>循环</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    print(<span class="string">"死循环"</span>)</span><br><span class="line"></span><br><span class="line">nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> nums:</span><br><span class="line">    print(num*num)</span><br></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="声明与调用"><a href="#声明与调用" class="headerlink" title="声明与调用"></a>声明与调用</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"This is function"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用</span></span><br><span class="line">function()</span><br></pre></td></tr></table></figure><h3 id="pass占位技巧"><a href="#pass占位技巧" class="headerlink" title="pass占位技巧"></a>pass占位技巧</h3><p>如果没想好函数里要写什么 也要能让代码能运行起来可以利用<strong>pass</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h3 id="函数返回多个参数，返回的是一个tuple"><a href="#函数返回多个参数，返回的是一个tuple" class="headerlink" title="函数返回多个参数，返回的是一个tuple"></a>函数返回多个参数，返回的是一个tuple</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span></span><br><span class="line"></span><br><span class="line">print(f())</span><br></pre></td></tr></table></figure><h3 id="可以对传入参数进行检查"><a href="#可以对传入参数进行检查" class="headerlink" title="可以对传入参数进行检查"></a>可以对传入参数进行检查</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_abs</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> isinstance(x, (int, float)):</span><br><span class="line">        <span class="keyword">raise</span> TypeError(<span class="string">'bad operand type'</span>)</span><br><span class="line">    <span class="keyword">if</span> x &gt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> -x</span><br></pre></td></tr></table></figure><h3 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h3><p>默认参数增添了函数调用的灵活性</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">data</span><span class="params">(id, gender, age=<span class="number">6</span>, city=<span class="string">'安徽'</span>)</span>:</span></span><br><span class="line">    print(id)</span><br><span class="line">    print(gender)</span><br><span class="line">    print(age)</span><br><span class="line">    print(city)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">data(<span class="number">1</span>, <span class="string">"Male"</span>,city=<span class="string">"北京"</span>)</span><br></pre></td></tr></table></figure><p>默认参数有个坑</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_end</span><span class="params">(L=[])</span>:</span></span><br><span class="line">    L.append(<span class="string">'END'</span>)</span><br><span class="line">    <span class="keyword">return</span> L</span><br></pre></td></tr></table></figure><p>当多次调用默认调用时</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">add_end()</span><br><span class="line">add_end()</span><br><span class="line">add_end()</span><br></pre></td></tr></table></figure><blockquote><p>[‘END’]<br>[‘END’, ‘END’]<br>[‘END’, ‘END’, ‘END’]<br>原因解释Python函数在定义的时候，默认参数L的值就被计算出来了，即[]，因为默认参数L也是一个变量，它指向对象[]，每次调用该函数，如果改变了L的内容，则下次调用时，默认参数的内容就变了，不再是函数定义时的[]了。</p></blockquote><p>定义默认参数要牢记一点：<strong>默认参数必须指向不变对象</strong></p><p>要修改上面的例子，可以利用None这个不变对象来实现</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_end</span><span class="params">(L=None)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> L <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        L = []</span><br><span class="line">    L.append(<span class="string">'END'</span>)</span><br><span class="line">    <span class="keyword">return</span> L</span><br></pre></td></tr></table></figure><p>为什么要设计str、None这样的不变对象呢？因为不变对象一旦创建，对象内部的数据就不能修改，这样就减少了由于修改数据导致的错误。此外，由于对象不变，多任务环境下同时读取对象不需要加锁，同时读一点问题都没有。我们在编写程序时，如果可以设计一个不变对象，那就尽量设计成不变对象。</p><h3 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h3><p>可变参数允许你传入0个或任意个参数，这些可变参数在函数调用时自动组装为一个tuple</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span><span class="params">(*args)</span>:</span></span><br><span class="line">    sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> args:</span><br><span class="line">        sum = sum + n;</span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line"></span><br><span class="line">print(sum(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>))</span><br></pre></td></tr></table></figure><p>如果已经又一个list或者tuple，要调用一个可变参数,可以在传入的list或者tuple前面加*</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">addAll</span><span class="params">(*args)</span>:</span></span><br><span class="line">    sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> args:</span><br><span class="line">        sum = sum + n</span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(addAll(*nums))</span><br></pre></td></tr></table></figure><h3 id="关键字参数"><a href="#关键字参数" class="headerlink" title="关键字参数"></a>关键字参数</h3><p>关键字参数允许你传入0个或者任意个含参数名的参数，函数调用的时候自动组装为一个dict</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">showInfo</span><span class="params">(**kw)</span>:</span></span><br><span class="line">    print(kw)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">showInfo(city=<span class="string">"Beijing"</span>, gender=<span class="string">"male"</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT-1107</title>
      <link href="/2019/11/05/PAT-1107/"/>
      <url>/2019/11/05/PAT-1107/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>Social Clusters<br><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805361586847744" target="_blank" rel="noopener">https://pintia.cn/problem-sets/994805342720868352/problems/994805361586847744</a></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>并查集的运用</p><p>关于并查集可见以下网站<br><a href="https://blog.csdn.net/liujian20150808/article/details/50848646" target="_blank" rel="noopener">https://blog.csdn.net/liujian20150808/article/details/50848646</a></p><p>本题描述:</p><ol><li><p>给定n人个兴趣爱好</p></li><li><p>一行代表一个人</p></li><li><p>有共同爱好，只要有一个爱好相同就可以组成一个交际圈</p></li></ol><p>本题<strong>关键</strong>：</p><ul><li>以什么为根建立并查集</li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1010</span>;</span><br><span class="line"><span class="keyword">int</span> like[maxn];<span class="comment">//保存喜欢某件物品的人</span></span><br><span class="line"><span class="keyword">int</span> father[maxn];<span class="comment">//</span></span><br><span class="line"><span class="keyword">int</span> ans[maxn];<span class="comment">//记录圈子中人的数量--&gt;因为序号在前面的人总是会被先记录，所以cnt个</span></span><br><span class="line"><span class="keyword">int</span> cnt=<span class="number">0</span>;<span class="comment">//圈子的数量</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(x!=father[x])&#123;</span><br><span class="line">        x=father[x];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">unit</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fx=<span class="built_in">find</span>(x);</span><br><span class="line">    <span class="keyword">int</span> fy=<span class="built_in">find</span>(y);</span><br><span class="line">    <span class="keyword">if</span>(fx!=fy)&#123;</span><br><span class="line">        father[fx]=fy;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//从大到小排序</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a&gt;b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        father[i]=i;<span class="comment">//初始化</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> k;<span class="comment">//有多少件喜欢的物品</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d:"</span>,&amp;k);</span><br><span class="line">        <span class="keyword">int</span> t;<span class="comment">//具体物品</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;k;j++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line">            <span class="keyword">if</span>(like[t]==<span class="number">0</span>)&#123;<span class="comment">//还没有标记谁喜欢</span></span><br><span class="line">                <span class="comment">//标记为第一个喜欢这件物品的人，</span></span><br><span class="line">                <span class="comment">//别人再喜欢这件物品就与这个第一个人建立联系</span></span><br><span class="line">                like[t]=i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//合并为一个集合</span></span><br><span class="line">            unit(i,like[t]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        ans[<span class="built_in">find</span>(i)]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ans[i]!=<span class="number">0</span>)&#123;</span><br><span class="line">            cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(ans,ans+n+<span class="number">1</span>,cmp);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,cnt);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d"</span>,ans[i]);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">" %d"</span>,ans[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT </tag>
            
            <tag> 并查集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件自动分类脚本</title>
      <link href="/2019/11/05/%E6%96%87%E4%BB%B6%E8%87%AA%E5%8A%A8%E5%88%86%E7%B1%BB%E8%84%9A%E6%9C%AC/"/>
      <url>/2019/11/05/%E6%96%87%E4%BB%B6%E8%87%AA%E5%8A%A8%E5%88%86%E7%B1%BB%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<p>记录一下自己写的文件分类脚本,根据文件的结尾进行自动分类</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">@File  : 1.py.py</span></span><br><span class="line"><span class="string">@Author: SedationH</span></span><br><span class="line"><span class="string">@Date  : 2019/11/5 4:27 下午</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"></span><br><span class="line"><span class="comment"># 相对路径,以 ./ 开头</span></span><br><span class="line">path = <span class="string">'./'</span></span><br><span class="line"></span><br><span class="line">files = os.listdir(path)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> f <span class="keyword">in</span> files:</span><br><span class="line">    <span class="comment"># 获得文件结尾</span></span><br><span class="line">    <span class="comment"># split分割的结果 [path,png]</span></span><br><span class="line">    folder_name = <span class="string">'./'</span> + f.split(<span class="string">'.'</span>)[<span class="number">-1</span>]</span><br><span class="line">    <span class="comment"># e.g. f.png</span></span><br><span class="line">    <span class="comment"># 判断是否有./png的路径</span></span><br><span class="line">    <span class="keyword">if</span> folder_name == <span class="string">'./py'</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(folder_name):</span><br><span class="line">        os.makedirs(folder_name)</span><br><span class="line">        shutil.move(f,folder_name)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        shutil.move(f, folder_name)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 脚本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VSCode使用</title>
      <link href="/2019/11/04/VSCode%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/11/04/VSCode%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="配置C-写程序设计小文件"><a href="#配置C-写程序设计小文件" class="headerlink" title="配置C++写程序设计小文件"></a>配置C++写程序设计小文件</h2><h3 id="先下载相关的编译器gcc"><a href="#先下载相关的编译器gcc" class="headerlink" title="先下载相关的编译器gcc"></a>先下载相关的编译器gcc</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brew install gcc</span><br></pre></td></tr></table></figure><p>修改环境变量文件</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export PATH=&quot;/usr/local/Cellar/gcc/9.1.0/bin:$PATH&quot;</span><br><span class="line">alias gcc=&apos;gcc-9&apos;</span><br><span class="line">alias g++=&apos;g++-9&apos;</span><br><span class="line">alias c++=&apos;c++-9&apos;</span><br><span class="line">source ~/.bash_profile</span><br></pre></td></tr></table></figure><p>输入g++ -v查看效果</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Using built-in specs.</span><br><span class="line">COLLECT_GCC=g++-9</span><br><span class="line">COLLECT_LTO_WRAPPER=/usr/local/Cellar/gcc/9.2.0_1/libexec/gcc/x86_64-apple-darwin18/9.2.0/lto-wrapper</span><br><span class="line">Target: x86_64-apple-darwin18</span><br><span class="line">Configured with: ../configure --build=x86_64-apple-darwin18 --prefix=/usr/local/Cellar/gcc/9.2.0_1 --libdir=/usr/local/Cellar/gcc/9.2.0_1/lib/gcc/9 --disable-nls --enable-checking=release --enable-languages=c,c++,objc,obj-c++,fortran --program-suffix=-9 --with-gmp=/usr/local/opt/gmp --with-mpfr=/usr/local/opt/mpfr --with-mpc=/usr/local/opt/libmpc --with-isl=/usr/local/opt/isl --with-system-zlib --with-pkgversion=&apos;Homebrew GCC 9.2.0_1&apos; --with-bugurl=https://github.com/Homebrew/homebrew-core/issues --disable-multilib --with-native-system-header-dir=/usr/include --with-sysroot=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk</span><br><span class="line">Thread model: posix</span><br><span class="line">gcc version 9.2.0 (Homebrew GCC 9.2.0_1)</span><br></pre></td></tr></table></figure><h3 id="VSCode配置"><a href="#VSCode配置" class="headerlink" title="VSCode配置"></a>VSCode配置</h3><p>建立一个放代码的根文件夹，这个文件夹只能再往下分一级，要不没法运行代码，原因我在下面标重点</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~</span><br><span class="line">mkdir code</span><br><span class="line">cd code</span><br></pre></td></tr></table></figure><p>为了不把代码文件和生成文件混在一起，<br>再建立一个build文件专门存放生成文件</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir build</span><br></pre></td></tr></table></figure><p>先阐述一下VSCode的层次系统<br>默认设置（不可修改）-用户设置-工作区设置-文件夹设置<br>我们这个文件夹是专门用来写程序设计代码的，跑跑小的c++代码，所以我们选择在工作区中设置</p><p><img src="1.png" alt="1"></p><p><img src="2.png" alt="2"></p><p>把这段代码写进去</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;explorer.confirmDelete&quot;: false,</span><br><span class="line">    // 在终端中运行编译命令，否则我们无法与程序通过标准输入交互</span><br><span class="line">    &quot;code-runner.runInTerminal&quot;: true,</span><br><span class="line">    // 运行代码之前清除之前的输出</span><br><span class="line">    &quot;code-runner.clearPreviousOutput&quot;: true,</span><br><span class="line">    // 开启这个后在运行编译命令之前会自动 cd 至文件所在目录</span><br><span class="line">    &quot;code-runner.fileDirectoryAsCwd&quot;: true,</span><br><span class="line">    // 这里只保留了 C 和 C++ 的编译命令，有需要其他语言的请自行添加</span><br><span class="line">    &quot;code-runner.executorMap&quot;: &#123;</span><br><span class="line">        &quot;c&quot;: &quot;gcc $fileName -o ../build/$fileNameWithoutExt &amp;&amp; ../build/$fileNameWithoutExt&quot;,</span><br><span class="line">        &quot;cpp&quot;: &quot;g++ $fileName -o ../build/$fileNameWithoutExt &amp;&amp; ../build/$fileNameWithoutExt&quot;,</span><br><span class="line">    &#125;,</span><br><span class="line">    // 运行代码后切换焦点至终端，方便直接输入测试数据</span><br><span class="line">    &quot;code-runner.preserveFocus&quot;: false,</span><br><span class="line">    // 在运行代码之前保存文件</span><br><span class="line">    &quot;code-runner.saveFileBeforeRun&quot;: true,</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>“code-runner.executorMap”: {<br>        “c”: “gcc $fileName -o ../build/$fileNameWithoutExt &amp;&amp; ../build/$fileNameWithoutExt”,<br>        “cpp”: “g++ $fileName -o ../build/$fileNameWithoutExt &amp;&amp; ../build/$fileNameWithoutExt”,<br>},<br><strong>运行执行链接是有要求的</strong></p><p>所以只能在code中建立一个文件夹来写</p>]]></content>
      
      
      <categories>
          
          <category> note </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Mac折腾记录</title>
      <link href="/2019/11/03/Mac%E6%8A%98%E8%85%BE%E8%AE%B0%E5%BD%95/"/>
      <url>/2019/11/03/Mac%E6%8A%98%E8%85%BE%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><h3 id="0"><a href="#0" class="headerlink" title="0"></a>0</h3><p>Win10又崩了，正颓丧的装着系统，想着mmp环境又要配置，突发奇想–Mac</p><h3 id="1"><a href="#1" class="headerlink" title="1"></a>1</h3><p>于是就开始黑苹果双系统的生涯，搜了搜，黑苹果麻烦还挺多，好吧，直接淘宝<br>加了技术员，让我下载文件，挺大，8G，终于下载好了，技术员给我远程操作，丫的，当我看到那个苹果标志时候是多么兴奋啊，然而，死机了<br>换了四个技术员，还是没法解决问题，他们表示给我申请退款<br>胡晨曦没有放弃，他去了另一家店铺，一番砍价后，成功杀成了半价，加技术员QQ，开始<br>这次用QQ联系，明显感觉回复快了很多，上一家我说一句要等半天，贵的就是不一样，vip服务<br>这次成功启动了，跟着引导设置，啊，激动的心，颤抖的手，我滴Mac开始了</p><h3 id="2"><a href="#2" class="headerlink" title="2"></a>2</h3><p>黑苹果问题也很多</p><ol><li>不能用无线网  -&gt; 自己买无限网卡解决(已经在路上了)</li><li>声音不能外放</li><li>环境不熟悉</li><li>触摸板不能用<br>这些事安装后发现的问题，不过折腾就完事了，先用用看</li></ol><h3 id="3"><a href="#3" class="headerlink" title="3"></a>3</h3><ol><li>先安装brew<br>可能会需要添加代理</li></ol><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export http_proxy=&quot;http://localhost:1087&quot;</span><br><span class="line">export https_proxy=&quot;http://localhost:1087&quot;</span><br></pre></td></tr></table></figure><p>消除代理</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">unset http_proxy</span><br><span class="line">unset https_proxy</span><br></pre></td></tr></table></figure><p>下载brew_install到指定目录</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd ~</span><br><span class="line">curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install &gt;&gt; brew_install</span><br></pre></td></tr></table></figure><p>修改下载的brew_install文件<br>BREW_REPO = “<a href="https://github.com/Homebrew/brew&quot;.freeze" target="_blank" rel="noopener">https://github.com/Homebrew/brew&quot;.freeze</a> 注释掉<br>CORE_TAP_REPO = “<a href="https://github.com/Homebrew/homebrew-core&quot;.freeze" target="_blank" rel="noopener">https://github.com/Homebrew/homebrew-core&quot;.freeze</a> 注释掉</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">code brew_install</span><br><span class="line">BREW_REPO = “git://mirrors.ustc.edu.cn/brew.git”.freeze</span><br><span class="line">CORE_TAP_REPO = “git://mirrors.ustc.edu.cn/homebrew-core.git”.freeze</span><br></pre></td></tr></table></figure><p>安装brew_install文件</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/usr/bin/ruby ~/brew_install</span><br></pre></td></tr></table></figure><p>为了能使用brew下载各种包的时候不被墙，切换其下载源</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd “$(brew –repo)”</span><br><span class="line">git remote set-url origin git://mirrors.ustc.edu.cn/brew.git</span><br><span class="line"></span><br><span class="line">cd “$(brew –repo)/Library/Taps/homebrew/homebrew-core”</span><br><span class="line">git remote set-url origin git://mirrors.ustc.edu.cn/homebrew-core.git</span><br></pre></td></tr></table></figure><p>设置镜像（我也不知道有什么用处）</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo &apos;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles&apos; &gt;&gt; ~/.bash_profile</span><br><span class="line">source ~/.bash_profile</span><br></pre></td></tr></table></figure><p>开始使用吧</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brew update</span><br><span class="line">brew doctor</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> note </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PAT-1021</title>
      <link href="/2019/10/30/PAT-1021/"/>
      <url>/2019/10/30/PAT-1021/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>Deepest Root<br><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805482919673856" target="_blank" rel="noopener">https://pintia.cn/problem-sets/994805342720868352/problems/994805482919673856</a></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>第一次循环dfs，判断联通分量，用最远的一个点i，再dfs，求出别的点，最后答案别忘了加入i</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">#<span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line">#<span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line">#<span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line">#<span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e4</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> N,maxDepth;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[maxn],tem;</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"><span class="keyword">int</span> cnt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> v,<span class="keyword">int</span> depth)</span></span>&#123;</span><br><span class="line">    vis[v]=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span>(depth&gt;maxDepth)&#123;</span><br><span class="line">        maxDepth=depth;</span><br><span class="line">        tem.<span class="built_in">clear</span>();</span><br><span class="line">        tem.push_back(v);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(depth==maxDepth)&#123;</span><br><span class="line">        tem.push_back(v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;G[v].<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!vis[G[v][i] ])&#123;</span><br><span class="line">            dfs(G[v][i],depth+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;N);</span><br><span class="line">    <span class="keyword">int</span> a,b;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N<span class="number">-1</span>;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a,&amp;b);</span><br><span class="line">        G[a].push_back(b);</span><br><span class="line">        G[b].push_back(a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> s;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!vis[i])&#123;</span><br><span class="line">            dfs(i,<span class="number">1</span>);</span><br><span class="line">            cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(tem.<span class="built_in">size</span>()!=<span class="number">0</span>)&#123;</span><br><span class="line">                s=tem[<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;tem.<span class="built_in">size</span>();j++)&#123;</span><br><span class="line">                ans.insert(tem[j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(cnt&gt;=<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Error: %d components"</span>, cnt);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        tem.<span class="built_in">clear</span>();</span><br><span class="line">        maxDepth=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">fill</span>(vis,vis+maxn,<span class="literal">false</span>);</span><br><span class="line">        dfs(s,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;tem.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            ans.insert(tem[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        ans.insert(s);</span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;::iterator it=ans.<span class="built_in">begin</span>();it!=ans.<span class="built_in">end</span>();it++)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,*it);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图 </tag>
            
            <tag> dfs </tag>
            
            <tag> PAT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT-1013</title>
      <link href="/2019/10/29/PAT-1013/"/>
      <url>/2019/10/29/PAT-1013/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>Battle Over Cities<br><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805500414115840" target="_blank" rel="noopener">https://pintia.cn/problem-sets/994805342720868352/problems/994805500414115840</a></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>题目比较简单，就是找联通分量</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">#<span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line">#<span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,k;<span class="comment">//城市数量，铁路数量，检查数量 </span></span><br><span class="line"><span class="keyword">int</span> G[<span class="number">1010</span>][<span class="number">1010</span>];</span><br><span class="line"><span class="keyword">bool</span> vis[<span class="number">1010</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">    vis[u]=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> v=<span class="number">1</span>;v&lt;=n;v++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(G[u][v]==<span class="number">1</span> &amp;&amp; !vis[v])&#123;</span><br><span class="line">            dfs(v);    </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Check</span><span class="params">(<span class="keyword">int</span> c)</span></span>&#123;</span><br><span class="line">    <span class="built_in">fill</span>(vis,vis+<span class="number">1010</span>,<span class="literal">false</span>);<span class="comment">//每次检查钱要进行恢复 </span></span><br><span class="line">    <span class="comment">//把这个点标记为访问再判断联通分量个数</span></span><br><span class="line">    vis[c]=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!vis[i])&#123;</span><br><span class="line">            dfs(i);</span><br><span class="line">            ans++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m&gt;&gt;k;</span><br><span class="line">    <span class="keyword">int</span> a,b;</span><br><span class="line">    <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line">        G[a][b]=G[b][a]=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> c;</span><br><span class="line">    <span class="keyword">while</span>(k--)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;c;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;Check(c)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图 </tag>
            
            <tag> dfs </tag>
            
            <tag> PAT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT-1034</title>
      <link href="/2019/10/29/PAT-1034/"/>
      <url>/2019/10/29/PAT-1034/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>Head of a Gang<br><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805456881434624" target="_blank" rel="noopener">https://pintia.cn/problem-sets/994805342720868352/problems/994805456881434624</a></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>本题是找图的联通分量，运用dfs进行遍历<br>题目大意：给出1000条以内的通话记录A B和权值w，和阈值k，如果一个团伙人数超过2人并且通话总权值超过k，令团伙里面的自身权值的最大值为头目，输出所有满足条件的团伙的头目，和他们团伙里面的人数<br>好用的技巧，map简历自创建id和姓名的映射</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">#<span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line">#<span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,k;</span><br><span class="line"><span class="keyword">int</span> id=<span class="number">0</span>;<span class="comment">//产生的编号从0开始 </span></span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt; stringToInt,ans;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="built_in">string</span>&gt; intToString;</span><br><span class="line"><span class="keyword">int</span> weight[<span class="number">2010</span>];</span><br><span class="line"><span class="keyword">int</span> G[<span class="number">2010</span>][<span class="number">2010</span>];</span><br><span class="line"><span class="keyword">bool</span> vis[<span class="number">2010</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">CreateID</span><span class="params">(<span class="built_in">string</span> s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!stringToInt.count(s))&#123;</span><br><span class="line">        stringToInt[s]=id;</span><br><span class="line">        intToString[id]=s;</span><br><span class="line">        <span class="keyword">return</span> id++;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stringToInt[s];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span>&amp; head,<span class="keyword">int</span>&amp; num,<span class="keyword">int</span>&amp; sumW)</span></span>&#123;<span class="comment">//查询一个团的head num sumW </span></span><br><span class="line">    vis[u]=<span class="literal">true</span>;</span><br><span class="line">    num++;</span><br><span class="line">    <span class="keyword">if</span>(weight[u]&gt;weight[head])&#123;</span><br><span class="line">        head=u;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> v=<span class="number">0</span>;v&lt;id;v++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(G[u][v]&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            sumW+=G[u][v];</span><br><span class="line">            G[u][v]=G[v][u]=<span class="number">0</span>;<span class="comment">//防止重复计算 </span></span><br><span class="line">            <span class="keyword">if</span>(!vis[v])&#123;</span><br><span class="line">                dfs(v,head,num,sumW);</span><br><span class="line">            &#125; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfsTrave</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;id;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!vis[i])&#123;</span><br><span class="line">            <span class="keyword">int</span> head=i,num=<span class="number">0</span>,sumW=<span class="number">0</span>;<span class="comment">//先默认当前入口为head,总人数为0，总权重为0</span></span><br><span class="line">            dfs(i,head,num,sumW);</span><br><span class="line">            <span class="keyword">if</span>(num&gt;<span class="number">2</span> &amp;&amp; sumW&gt;k)&#123;</span><br><span class="line">                ans[intToString[head]]=num;<span class="comment">//答案输出首领和团队人数 </span></span><br><span class="line">            &#125; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;k;</span><br><span class="line">    <span class="built_in">string</span> s1,s2;</span><br><span class="line">    <span class="keyword">int</span> w;</span><br><span class="line">    <span class="keyword">int</span> id1,id2;</span><br><span class="line">    <span class="keyword">while</span>(n--)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;s1&gt;&gt;s2&gt;&gt;w;</span><br><span class="line">        id1=CreateID(s1);</span><br><span class="line">        id2=CreateID(s2);</span><br><span class="line">        weight[id1]+=w;</span><br><span class="line">        weight[id2]+=w;</span><br><span class="line">        G[id1][id2]+=w;</span><br><span class="line">        G[id2][id1]+=w;</span><br><span class="line">    &#125;</span><br><span class="line">    dfsTrave();</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans.<span class="built_in">size</span>()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt;::iterator it=ans.<span class="built_in">begin</span>();it!=ans.<span class="built_in">end</span>();it++)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;it-&gt;first&lt;&lt;<span class="string">" "</span>&lt;&lt;it-&gt;second&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图 </tag>
            
            <tag> dfs </tag>
            
            <tag> PAT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法笔记阅读</title>
      <link href="/2019/10/26/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0%E9%98%85%E8%AF%BB/"/>
      <url>/2019/10/26/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0%E9%98%85%E8%AF%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="C-C-快速入门"><a href="#C-C-快速入门" class="headerlink" title="C/C++快速入门"></a>C/C++快速入门</h2><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><h4 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h4><ol><li><p>整型<br>绝对值在10的9次方范围以内都可以定义为int，除此之外用long long<br>关于long long的使用<br>‘long long bigNum=123LL;’<br>可以给long long 起个别名<br>typedef long long LL;<br>LL a=1234LL;</p></li><li><p>浮点型<br>就用double,不要用float</p></li></ol><h4 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h4><p>(新类型名)变量名</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">double</span> r = <span class="number">12.56</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,(<span class="keyword">int</span>)r);<span class="comment">//12</span></span><br></pre></td></tr></table></figure><h3 id="输入输出问题"><a href="#输入输出问题" class="headerlink" title="输入输出问题"></a>输入输出问题</h3><ol><li><p>scanf:<br>long long  %lld<br>double     %lf</p></li><li><p>printf:<br>long long %lld<br>double %f</p></li><li><p>输出格式<br>%0md 当变量不足m位时，前面补足0输出</p></li></ol><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a=<span class="number">123</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%05d"</span>,a);<span class="comment">//00123</span></span><br></pre></td></tr></table></figure><p>%.mf 可以让浮点数保留m位小数输出，保留方式自动四舍五入</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">double</span> d1=<span class="number">12.3456</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%.0f"</span>,d1);<span class="comment">//12 能起到四舍五入的效果</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%.0f"</span>,<span class="number">12.6</span>);<span class="comment">//13</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%.1f"</span>,d1);<span class="comment">//12.3</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%.2f"</span>,d1);<span class="comment">//12.35</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%.3f"</span>,d1);<span class="comment">//12.346</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%.4f"</span>,d1);<span class="comment">//12.3456</span></span><br></pre></td></tr></table></figure><h3 id="常用math函数"><a href="#常用math函数" class="headerlink" title="常用math函数"></a>常用math函数</h3><p>加入 cmath<br>以下返回类型均为double类型</p><ol><li><p>fabs()<br>对double变量取绝对值</p></li><li><p>floor() ceil()<br>分别是向上取整和向下取整<br>floor(-5.2) -6<br>ceil(-5.2) -5<br>floor(5.2) 5<br>ceil(5.2) 6</p></li><li><p>pow(double r,double p)<br>r^p</p></li><li><p>sqrt(double x)<br>返回算数平方根</p></li><li><p>log(double x)<br>logab=log(b)/log(a)酸楚以a为底b的对数</p></li><li><p>PI=acos(-1.0)</p></li><li><p>printf(“%.0f”,12.6);//13</p></li></ol><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>如果申请数组大小比较大1e6级别，需要将其定义在主函数外面，否则会使程序异常推出，系统内部申请的局部变量来自于系统栈，全局变量来源于静态存储区</p><p>使用memset初始化数组(cstring)，只能-1 和 0<br>‘memset(a,0,sizeof(a))’</p><h3 id="关于字符串的问题"><a href="#关于字符串的问题" class="headerlink" title="关于字符串的问题"></a>关于字符串的问题</h3><p>接收带空格的字符串使用gets(),使用scanf后，要先用getchar()，清除掉缓存区的回车键</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> str1[<span class="number">20</span>],str2[<span class="number">20</span>];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,str1);</span><br><span class="line">getchar();</span><br><span class="line">gets(str2);</span><br></pre></td></tr></table></figure><p>使用sscanf和sprinf处理字符串(cstdio)</p><p>sprintf的使用<br>sprintf(screen,格式控制,数据)<br>          &lt;—-</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> str[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">int</span> data=<span class="number">1024</span>;</span><br><span class="line"><span class="comment">//将数字变量转化为字符串</span></span><br><span class="line"><span class="built_in">sprintf</span>(str,<span class="string">"%d"</span>,data);</span><br><span class="line"><span class="comment">//获得不同进制的字符串数字</span></span><br><span class="line"><span class="comment">//16进制</span></span><br><span class="line"><span class="built_in">sprintf</span>(str,<span class="string">"0x%x"</span>,data);</span><br><span class="line"><span class="comment">//八进制</span></span><br><span class="line"><span class="built_in">sprintf</span>(str,<span class="string">"0%o"</span>,data)</span><br><span class="line"><span class="comment">// 链接多个字符串</span></span><br><span class="line"><span class="keyword">char</span>* s1=<span class="string">"Hello"</span>;</span><br><span class="line"><span class="keyword">char</span>* s2=<span class="string">"World"</span>;</span><br><span class="line"><span class="built_in">sprintf</span>(str,<span class="string">"%s %s"</span>,s1,s2);<span class="comment">//Hello World</span></span><br></pre></td></tr></table></figure><p>sscanf的使用<br>sscanf(数据源,格式控制,输入对象)<br>        ——–&gt;<br>sscanf可以支持格式字符%[]</p><ol><li>-表示范围 %[1-9]表示只读取1-9这几个数字</li><li>^表示不取 %[^\n]表示读取除了回车以外的所有字符</li><li>同时用, %[1-9,a-z]表示同时读取1-9，a-z的所有字符</li><li>原则：从第一个在指定范围内的数字开始读取，到第一个不在范围内的数字结束</li></ol><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> str[<span class="number">20</span>]=<span class="string">"123"</span>;</span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"><span class="comment">//根据格式从字符串中提取数据</span></span><br><span class="line"><span class="built_in">sscanf</span>(str,<span class="string">"%d"</span>,&amp;num);</span><br></pre></td></tr></table></figure><h3 id="结构体的使用"><a href="#结构体的使用" class="headerlink" title="结构体的使用"></a>结构体的使用</h3><p>利用结构体的构造函数实现其初始化</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span>&#123;</span></span><br><span class="line">  <span class="keyword">int</span> x,y;</span><br><span class="line">  Point()&#123;&#125;<span class="comment">//如果写了有参的构造函数，无参构造函数不会自动生成</span></span><br><span class="line">  Point(<span class="keyword">int</span> _x,<span class="keyword">int</span> _y):x(_x),y(_y)&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><h4 id="cin与cout"><a href="#cin与cout" class="headerlink" title="cin与cout"></a>cin与cout</h4><p>如果想读入带空格的字符串</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> str[<span class="number">100</span>];</span><br><span class="line"><span class="built_in">cin</span>.getline(str,<span class="number">100</span>);</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line">getline(<span class="built_in">cin</span>,s);</span><br></pre></td></tr></table></figure><h4 id="浮点数的比较"><a href="#浮点数的比较" class="headerlink" title="浮点数的比较"></a>浮点数的比较</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义极小数</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-8</span>;</span><br><span class="line"><span class="comment">// ==</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Equ(a,b) ((fabs((a)-(b)))&lt;(eps))</span></span><br><span class="line"><span class="comment">// &gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> More(a,b) (((a)-(b))&gt;(eps))</span></span><br><span class="line"><span class="comment">// &lt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Less(a,b) (((a)-(b))&lt;(-eps))</span></span><br><span class="line"><span class="comment">// &gt;=</span></span><br><span class="line">!Less(a,b)</span><br><span class="line"><span class="comment">// &lt;=</span></span><br><span class="line">!More(a,b)</span><br></pre></td></tr></table></figure><h4 id="黑盒测试之多点测试"><a href="#黑盒测试之多点测试" class="headerlink" title="黑盒测试之多点测试"></a>黑盒测试之多点测试</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%s"</span>,str)!=EOF)&#123;&#125;</span><br><span class="line"><span class="keyword">while</span>(gets(str)!=<span class="literal">NULL</span>)&#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="入门模拟"><a href="#入门模拟" class="headerlink" title="入门模拟"></a>入门模拟</h2><h3 id="日期处理"><a href="#日期处理" class="headerlink" title="日期处理"></a>日期处理</h3><p>题目<br>求两个日期之间的天数，如果两个日期是连续的，规定他们之间的天数为两天<br>输入格式<br>20130101<br>20130105<br>输出格式<br>5</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> month[<span class="number">13</span>][<span class="number">2</span>]=&#123;<span class="comment">//平年和闰年每个月的天数1--&gt;闰</span></span><br><span class="line">    &#123;<span class="number">0</span>,<span class="number">0</span>&#125;,&#123;<span class="number">31</span>,<span class="number">31</span>&#125;,&#123;<span class="number">28</span>,<span class="number">29</span>&#125;,&#123;<span class="number">31</span>,<span class="number">31</span>&#125;,&#123;<span class="number">30</span>,<span class="number">30</span>&#125;,&#123;<span class="number">31</span>,<span class="number">31</span>&#125;,</span><br><span class="line">    &#123;<span class="number">30</span>,<span class="number">30</span>&#125;,&#123;<span class="number">31</span>,<span class="number">31</span>&#125;,&#123;<span class="number">31</span>,<span class="number">31</span>&#125;,&#123;<span class="number">30</span>,<span class="number">30</span>&#125;,&#123;<span class="number">31</span>,<span class="number">31</span>&#125;,&#123;<span class="number">30</span>,<span class="number">30</span>&#125;,</span><br><span class="line">    &#123;<span class="number">31</span>,<span class="number">31</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isLeap</span><span class="params">(<span class="keyword">int</span> year)</span></span>&#123;<span class="comment">//判断是否是闰年</span></span><br><span class="line">    <span class="keyword">return</span> (year%<span class="number">4</span>==<span class="number">0</span> &amp;&amp; year%<span class="number">100</span>!=<span class="number">0</span>) || (year%<span class="number">400</span>==<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> time1,y1,m1,d1;</span><br><span class="line">    <span class="keyword">int</span> time2,y2,m2,d2;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;time1,&amp;time2)!=EOF)&#123;</span><br><span class="line">        <span class="keyword">if</span>(time1&gt;time2)&#123;</span><br><span class="line">            <span class="keyword">int</span> tem=time1;</span><br><span class="line">            time1=time2;</span><br><span class="line">            time2=tem;</span><br><span class="line">        &#125;</span><br><span class="line">        y1=time1/<span class="number">10000</span>,m1=time1%<span class="number">10000</span>/<span class="number">100</span>,d1=time1%<span class="number">100</span>;</span><br><span class="line">        y2=time2/<span class="number">10000</span>,m2=time2%<span class="number">10000</span>/<span class="number">100</span>,d2=time2%<span class="number">100</span>;</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">1</span>;<span class="comment">//记录结果</span></span><br><span class="line">        <span class="keyword">while</span>(y1&lt;y2 || m1&lt;m2 || d1&lt;d2)&#123;</span><br><span class="line">            d1++;</span><br><span class="line">            <span class="keyword">if</span>(d1==month[m1][isLeap(y1)]+<span class="number">1</span>)&#123;<span class="comment">//满了当月的天数</span></span><br><span class="line">                m1++;</span><br><span class="line">                d1=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(m1==<span class="number">13</span>)&#123;</span><br><span class="line">                y1++;</span><br><span class="line">                m1=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            ans++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//把x进制的数字a变为y进制的数字</span></span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line"><span class="built_in">string</span> a;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">solution</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//先转换为十进制数字</span></span><br><span class="line">    <span class="keyword">int</span> tem;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.<span class="built_in">size</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i]&gt;=<span class="string">'0'</span> &amp;&amp; a[i]&lt;=<span class="string">'9'</span>)&#123;</span><br><span class="line">            tem=a[i]-<span class="string">'0'</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            tem=a[i]-<span class="string">'A'</span>+<span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        sum=sum*x+tem;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">char</span> t;</span><br><span class="line">    <span class="built_in">string</span> ans=<span class="string">""</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        tem=sum%y;</span><br><span class="line">        <span class="keyword">if</span>(tem&gt;=<span class="number">0</span> &amp;&amp; tem&lt;=<span class="number">9</span>)&#123;</span><br><span class="line">            t=(<span class="keyword">char</span>)(<span class="string">'0'</span>+tem);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            t=(<span class="keyword">char</span>)(<span class="string">'A'</span>+tem<span class="number">-10</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        ans=t+ans;</span><br><span class="line">        sum/=y;</span><br><span class="line">        <span class="keyword">if</span>(sum==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> ans;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="算法初步"><a href="#算法初步" class="headerlink" title="算法初步"></a>算法初步</h2><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><p>使用sort并结合结构体使用</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">char</span> id[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">int</span> score;</span><br><span class="line">    <span class="keyword">int</span> rank;</span><br><span class="line">&#125;stu[maxn];</span><br><span class="line"></span><br><span class="line"><span class="comment">//分数高的排前面，分数相同，字典序小的在前</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Student a,Student b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a.score!=b.score)&#123;</span><br><span class="line">        <span class="keyword">return</span> a.score&gt;b.socre;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">strcmp</span>(a.name,b.name)&lt;<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//排名的实现</span></span><br><span class="line"><span class="comment">//分数不同排名不同，分数相同的排名相同并且占据一个排位</span></span><br><span class="line"><span class="comment">//之前已经sort过了</span></span><br><span class="line">stu[<span class="number">0</span>].r=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(ing i=<span class="number">1</span>;i&lt;n;i++&gt;)&#123;</span><br><span class="line">    <span class="keyword">if</span>(stu[i].score==stu[i<span class="number">-1</span>].score)&#123;</span><br><span class="line">        stu[i].r=stu[i<span class="number">-1</span>].r;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        stu[i].r=i+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相关例题<a href="https://sedationh.github.io/2019/11/13/PAT-1025/">PAT A1025</a></p><h3 id="贪心"><a href="#贪心" class="headerlink" title="贪心"></a>贪心</h3><p>考虑局部的最优解，进而得到全局的最优解</p><p>区间不相交问题：给出N个开区间，从中选择尽可能多的开区间，使得两两之间没有交集</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Interval</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x,y;<span class="comment">//x为左端点,y为右端点</span></span><br><span class="line">&#125;I[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Interval a,Interval b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a.x!=b.x)&#123;<span class="comment">//先把左端点从大到小排序</span></span><br><span class="line">        <span class="keyword">return</span> a.x&gt;b.y;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;<span class="comment">//右端点从小到大排序</span></span><br><span class="line">        <span class="keyword">return</span> a.y&lt;b.y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n),n!=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;I[i].x,&amp;I[i].y);</span><br><span class="line">        &#125;</span><br><span class="line">        sort(I,I+n,cmp);</span><br><span class="line">        <span class="comment">//ans记录不相交区间个数，lastX记录上一个被选中 区间的左端点</span></span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">1</span>,lastX=I[<span class="number">0</span>].x;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(I[i].y&lt;=lastX)&#123;</span><br><span class="line">                lastX=I[i].x;</span><br><span class="line">                ans++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二分"><a href="#二分" class="headerlink" title="二分"></a>二分</h3><h4 id="二分查询"><a href="#二分查询" class="headerlink" title="二分查询"></a>二分查询</h4><p>前提要严格递增或递减</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//二分区间为[l,r]，寻找x的在数组中的索引值</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(<span class="keyword">int</span> arr[],<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> mid;</span><br><span class="line">    <span class="keyword">while</span>(l&lt;=r)&#123;<span class="comment">//如果left&gt;rigth区间就不存在了</span></span><br><span class="line">        mid=l+(r-l)/<span class="number">2</span>;<span class="comment">//防止移除</span></span><br><span class="line">        <span class="keyword">if</span>(arr[mid]==x)&#123;</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(arr[mid]&gt;x)&#123;</span><br><span class="line">            r=mid<span class="number">-1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            l=mid+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;<span class="comment">//如果没有找到</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//寻找第一个大于等于x元素的位置</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lowerBound</span><span class="params">(<span class="keyword">int</span> arr[],<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> mid;</span><br><span class="line">    <span class="keyword">while</span>(l&lt;r)&#123;<span class="comment">//对于[l,r]来说，l==r就已经找到了唯一位置</span></span><br><span class="line">        mid=l+(r-l)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(arr[mid]&gt;=x)&#123;</span><br><span class="line">            r=mid;<span class="comment">//因为mid本身也满足要求</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            l=mid+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//寻找第一个大于x元素的为止</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">upperBound</span><span class="params">(<span class="keyword">int</span> arr[],<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> mid;</span><br><span class="line">    <span class="keyword">while</span>(l&lt;r)&#123;<span class="comment">//对于[l,r]来说，l==r就已经找到了唯一位置</span></span><br><span class="line">        mid=l+(r-l)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(arr[mid]&gt;x)&#123;</span><br><span class="line">            r=mid;<span class="comment">//因为mid本身也满足要求</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            l=mid+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="快速幂"><a href="#快速幂" class="headerlink" title="快速幂"></a>快速幂</h4><p>基于二分的思想，求a^b %m</p><ol><li>如果b是奇数 –&gt; a^b=a^(b-1) * a</li><li>如果b是偶数 –&gt; a^b=a^(b/2)*a^(b/2)</li></ol><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="comment">// 递归写法</span></span><br><span class="line"><span class="function">LL <span class="title">binaryPow1</span><span class="params">(LL a,LL b,LL m)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(b==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(b&amp;<span class="number">1</span>)&#123;<span class="comment">// 等价于b%2==1</span></span><br><span class="line">        <span class="keyword">return</span> a*binaryPow1(a,b<span class="number">-1</span>,m);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;<span class="comment">//如果是偶数</span></span><br><span class="line">        LL tem = binaryPow1(a,b/<span class="number">2</span>,m)%m;</span><br><span class="line">        <span class="keyword">return</span> tem*tem%m;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">binaryPow2</span><span class="params">(LL a,LL b,LL m)</span></span>&#123;</span><br><span class="line">    LL ans=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(b&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>)&#123;</span><br><span class="line">            ans=ans*a%m;</span><br><span class="line">        &#125;</span><br><span class="line">        a=a*a%m;</span><br><span class="line">        b&gt;&gt;=<span class="number">1</span>;<span class="comment">//b/=2;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="双指针-Two-Pointers"><a href="#双指针-Two-Pointers" class="headerlink" title="双指针(Two Pointers)"></a>双指针(Two Pointers)</h3><h4 id="引例"><a href="#引例" class="headerlink" title="引例"></a>引例</h4><p>给定一个递增正整数序列，一个正整数M，求序列中和为M的两个数，输出所有方案</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(i&lt;j)&#123;</span><br><span class="line">    <span class="keyword">if</span>(a[i]+a[j]==m)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d %d"</span>,a[i],a[j]);</span><br><span class="line">        i++;</span><br><span class="line">        j--;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(a[i]+a[j]&lt;m)&#123;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        j--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>合并两个递增序列A、B，合并为一个递增序列C</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> b[],<span class="keyword">int</span> c[],<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ai=<span class="number">0</span>,bi=<span class="number">0</span>,ci=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ai&lt;n &amp;&amp; bi&lt;m)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[ai]&lt;=b[bi])&#123;</span><br><span class="line">            c[ci++]=a[ai++];</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            c[ci++]=b[bi++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ai&lt;n)&#123;</span><br><span class="line">        c[ci++]=a[ai++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(bi&lt;m)&#123;</span><br><span class="line">        c[ci++]=b[bi++];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h4><p>(以下默认从小到大)<br>思路：划分区间，取元素arr[i],使左边均不大于arr[i],使右边均不小于arr[i],递归使所有元素都满足这个效果</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="keyword">int</span> arr[],<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;<span class="comment">//区间划分</span></span><br><span class="line">    <span class="keyword">int</span> tem=arr[l];<span class="comment">//主元 用来划分[l,r]的区间,这里理解为l这个位置空出来了</span></span><br><span class="line">    <span class="keyword">while</span>(l&lt;r)&#123;<span class="comment">//如果相等就找到了唯一位置</span></span><br><span class="line">        <span class="keyword">while</span>(l&lt;r &amp;&amp; arr[r]&gt;tem)&#123;</span><br><span class="line">            r--;<span class="comment">//反复左移右指针，直到找到元素&lt;=主元</span></span><br><span class="line">        &#125;</span><br><span class="line">        arr[l]=arr[r];<span class="comment">//r这个位置空出来了</span></span><br><span class="line">        <span class="keyword">while</span>(l&lt;r &amp;&amp; arr[l]&lt;tem)&#123;</span><br><span class="line">            l++;<span class="comment">//反复右移左指针，直到找到元素&gt;=主元</span></span><br><span class="line">        &#125;</span><br><span class="line">        arr[r]=arr[l];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l;<span class="comment">//终有一天他们相遇，找到唯一位置</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//传入l,r对应左右索引值</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span> arr[],<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;r)&#123;<span class="comment">//当区间长度&gt;1,至少有两个元素</span></span><br><span class="line">        <span class="keyword">int</span> pos=partition(arr,l,r);<span class="comment">//确定主元位置</span></span><br><span class="line">        quickSort(arr,l,pos<span class="number">-1</span>);<span class="comment">//递归规划左区间</span></span><br><span class="line">        quickSort(arr,pos+<span class="number">1</span>,r);<span class="comment">//递归规划右区间</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="其他高效技巧"><a href="#其他高效技巧" class="headerlink" title="其他高效技巧"></a>其他高效技巧</h3><p>把结果打表放到数组中</p><h2 id="数学问题"><a href="#数学问题" class="headerlink" title="数学问题"></a>数学问题</h2><h3 id="最大公约数和最小公倍数"><a href="#最大公约数和最小公倍数" class="headerlink" title="最大公约数和最小公倍数"></a>最大公约数和最小公倍数</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;<span class="comment">//求最大公约数</span></span><br><span class="line">    <span class="comment">//a，b之间的大小无所谓</span></span><br><span class="line">    <span class="keyword">if</span>(b==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> gcd(b,a%b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lcm</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;<span class="comment">//求小公倍数</span></span><br><span class="line">    <span class="keyword">int</span> d=gcd(a,b);</span><br><span class="line">    <span class="keyword">return</span> a/d*b;<span class="comment">//先除防止溢出</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分数的四则运算"><a href="#分数的四则运算" class="headerlink" title="分数的四则运算"></a>分数的四则运算</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//如果有大数需求，变为long long 下面的输出换一套</span></span><br><span class="line"><span class="comment">//1. 分数的表示</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Fraction</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> up,down;<span class="comment">//分子和分母</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 分数的化简</span></span><br><span class="line"><span class="function">Fraction <span class="title">reduction</span><span class="params">(Fraction res)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(res.down&lt;<span class="number">0</span>)&#123;<span class="comment">//规定分母为正数</span></span><br><span class="line">        res.up=-res.up;</span><br><span class="line">        res.down=-res.down;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(res.up==<span class="number">0</span>)&#123;<span class="comment">//数值为0，规定分母为1</span></span><br><span class="line">        res.down=<span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">int</span> d=gcd(<span class="built_in">abs</span>(res.up),res.down);</span><br><span class="line">        res.up/=d;</span><br><span class="line">        res.down/=d;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 分数的运算</span></span><br><span class="line"><span class="comment">//最后返回结果注意化简</span></span><br><span class="line"><span class="comment">//以加法作为例子</span></span><br><span class="line"><span class="function">Fraction <span class="title">add</span><span class="params">(Fraction a,Fraction b)</span></span>&#123;</span><br><span class="line">    Fraction res;</span><br><span class="line">    res.up=a.up*b.down+b.up*a.down;</span><br><span class="line">    res.down=a.down*b.down;</span><br><span class="line">    <span class="keyword">return</span> reduction(res);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//4. 分数的输出</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showRes</span><span class="params">(Fraction res)</span></span>&#123;</span><br><span class="line">    res=reduction(res);<span class="comment">//统一规则</span></span><br><span class="line">    <span class="keyword">if</span>(res.down==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>,res.up);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">abs</span>(res.up)&gt;res.down)&#123;<span class="comment">//假分数</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d %d/%d"</span>,res.up/res.down,<span class="built_in">abs</span>(res.up)%res.down,res.down);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d/%d"</span>,res.up,res.down);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="素数"><a href="#素数" class="headerlink" title="素数"></a>素数</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//素数筛</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">101</span>;<span class="comment">//筛选规模</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> prime[maxn],pNum;</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];<span class="comment">//记录元素是不是素数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">findP</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;maxn;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(vis[i]==<span class="literal">false</span>)&#123;</span><br><span class="line">            prime[pNum++]=i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">2</span>*i;j&lt;maxn;j+=i)&#123;<span class="comment">//从两倍开始，三倍...</span></span><br><span class="line">            vis[j]=<span class="literal">true</span>;<span class="comment">//这个位置是合数</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="质因子分解"><a href="#质因子分解" class="headerlink" title="质因子分解"></a>质因子分解</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x,cnt;<span class="comment">//x为质因子，cnt为其个数</span></span><br><span class="line">&#125;fac[<span class="number">10</span>];<span class="comment">//int范围足够了</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">如果在[2,n-1]中存在n的约数k，即n%k==0，那么一定存在n/k也为n的约数</span></span><br><span class="line"><span class="comment">k，与n/k中满足一个&lt;=sqrt(n),一个&gt;=sqrt(n),</span></span><br><span class="line"><span class="comment">所以对于[2,manx]范围，寻求质数</span></span><br><span class="line"><span class="comment">我们只用考虑[2,(int)sqrt(maxn*1.0)]的区间</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">上面结论用于质因子：</span></span><br><span class="line"><span class="comment">对于一个正整数n，如果它存在[2,n]范围内的质因子，</span></span><br><span class="line"><span class="comment">要么这些质因子均&lt;=sqrt(n)，</span></span><br><span class="line"><span class="comment">要么只存在一个&gt;sqrt(n)的质因子</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">10000</span>;<span class="comment">//素数筛选规模</span></span><br><span class="line"><span class="keyword">int</span> n=<span class="number">100</span>;<span class="comment">//要求的数字</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> prime[maxn],pNum;<span class="comment">//保存求出的素数[0,pNum-1],素数个数</span></span><br><span class="line"><span class="keyword">int</span> nFac=<span class="number">0</span>;<span class="comment">//用来保存质因子个数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DecomFac</span><span class="params">()</span></span>&#123;<span class="comment">//分解n求质因子</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;pNum &amp;&amp; prime[i]&lt;=<span class="built_in">sqrt</span>(n);i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(n%prime[i]==<span class="number">0</span>)&#123;</span><br><span class="line">            fac[nFac].x=prime[i];</span><br><span class="line">            fac[nFac].cnt=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(n%prime[i]==<span class="number">0</span>)&#123;</span><br><span class="line">                fac[nFac].cnt++;</span><br><span class="line">                n/=prime[i];</span><br><span class="line">            &#125;</span><br><span class="line">            nFac++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(n!=<span class="number">1</span>)&#123;<span class="comment">//如果无法被根号n以内的质因子除尽</span></span><br><span class="line">        fac[nFac].x=n;</span><br><span class="line">        fac[nFac].cnt=<span class="number">1</span>;</span><br><span class="line">        nFac++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>典型列题<a href="https://sedationh.github.io/2019/11/15/PAT-1059/">PAT-A1059</a></p><h3 id="大整数运算"><a href="#大整数运算" class="headerlink" title="大整数运算"></a>大整数运算</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bign</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> d[<span class="number">1000</span>];</span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line">    bign()&#123;</span><br><span class="line">        <span class="built_in">memset</span>(d,<span class="number">0</span>,<span class="keyword">sizeof</span>(d));</span><br><span class="line">        len=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">bign <span class="title">change</span><span class="params">(<span class="keyword">char</span> str[])</span></span>&#123;<span class="comment">//将整数（字符串类型）转化为bign</span></span><br><span class="line">     bign a;</span><br><span class="line">     a.len=<span class="built_in">strlen</span>(str);</span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.len;i++)&#123;</span><br><span class="line">         a.d[i]=str[a.len-i<span class="number">-1</span>]-<span class="string">'0'</span>;</span><br><span class="line">         <span class="comment">/*</span></span><br><span class="line"><span class="comment">            str  : 2348</span></span><br><span class="line"><span class="comment">            a.d  : 8423</span></span><br><span class="line"><span class="comment">            index: 0123</span></span><br><span class="line"><span class="comment">            整数的高位存在数组的高位（index大的位置）</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//比较两个数字的大小</span></span><br><span class="line"><span class="comment">//a&gt;b  1</span></span><br><span class="line"><span class="comment">//a==b 0</span></span><br><span class="line"><span class="comment">//a&lt;b -1</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">compare</span><span class="params">(bign a,bign b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a.len&gt;b.len)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(a.len&lt;b.len)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=a.len<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;<span class="comment">//从高位比向低位</span></span><br><span class="line">        <span class="keyword">if</span>(a.d[i]&gt;b.d[i])&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(a.d[i]&lt;b.d[i])&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">bign <span class="title">add</span><span class="params">(bign a,bign b)</span></span>&#123;</span><br><span class="line">    bign c;</span><br><span class="line">    <span class="keyword">int</span> carry=<span class="number">0</span>;<span class="comment">//进位</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.len || i&lt;b.len;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> tem=a.d[i]=b.d[i]+carry;</span><br><span class="line">        c.d[c.len++]=tem%<span class="number">10</span>;</span><br><span class="line">        carry=tem/<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(carry!=<span class="number">0</span>)&#123;</span><br><span class="line">        c.d[c.len++]=carry;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//a-b 要求a&gt;=b</span></span><br><span class="line"><span class="function">bign <span class="title">sub</span><span class="params">(bign a,bign b)</span></span>&#123;</span><br><span class="line">    bign c;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.len;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a.d[i]&lt;b.d[i])&#123;</span><br><span class="line">            a.d[i+<span class="number">1</span>]--;</span><br><span class="line">            a.d[i]+=<span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        c.d[c.len++]=a.d[i]-b.d[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//上面下来++了，先把这个减去</span></span><br><span class="line">    <span class="keyword">while</span>(c.len<span class="number">-1</span>&gt;=<span class="number">1</span> &amp;&amp; c.d[c.len<span class="number">-1</span>]==<span class="number">0</span>)&#123;</span><br><span class="line">        c.len--;<span class="comment">//除去最高位0，保留至少一位最低位</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="STL"><a href="#STL" class="headerlink" title="STL"></a>STL</h2><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><h3 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h3><p>主要用到的是静态链表<br>静态链表的实现原理是hash，通过建立一个结构体数组，并令数组的下标直接表示结点的地址，来达到直接访问结点的效果</p><p><a href="https://sedationh.github.io/2019/11/15/PAT-1032/">简单的例题PAT-A1032</a></p><p>一般步骤</p><ol><li>定义静态链表</li><li>flag=false</li><li>由初始结点遍历。标记有效结点，计数cnt</li><li>sort</li></ol><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805425780670464" target="_blank" rel="noopener">PAT-A1052</a></p><h2 id="搜索专题"><a href="#搜索专题" class="headerlink" title="搜索专题"></a>搜索专题</h2><h3 id="联通块问题"><a href="#联通块问题" class="headerlink" title="联通块问题"></a>联通块问题</h3><p><a href="https://sedationh.github.io/2019/11/16/%E8%BF%9E%E9%80%9A%E5%9D%97%E4%B8%AA%E6%95%B0/">https://sedationh.github.io/2019/11/16/%E8%BF%9E%E9%80%9A%E5%9D%97%E4%B8%AA%E6%95%B0/</a></p><h3 id="迷宫问题"><a href="#迷宫问题" class="headerlink" title="迷宫问题"></a>迷宫问题</h3><p>&lt;&gt;</p><h3 id="queue使用的注意"><a href="#queue使用的注意" class="headerlink" title="queue使用的注意"></a>queue使用的注意</h3><p>push操作创建的是该元素的一个副本，两者的修改不会产生相互影响，不过想要交互，入队下标</p><h2 id="树"><a href="#树" class="headerlink" title="树"></a>树</h2><h3 id="树与二叉树"><a href="#树与二叉树" class="headerlink" title="树与二叉树"></a>树与二叉树</h3><p>在数据结构中，一般把根结点置于最上方，向下延伸多条边形成子树</p><p>树的实用性质：</p><ol><li>树可以没有结点，这种情况把树称为空树</li><li>树的层次（layer）从根节点开始算起，为第一层</li><li>把结点子树的个数称为结点的度（degree），树中结点的最大度称为树的度</li><li>由于一条边连接两个点，且树中不存在环，因此对于有n个结点的树，边数为n-1，且<strong>满足联通、边数等于顶点数-1的结构一定是一颗树</strong></li><li>叶子结点被定义为度为0的结点，因此当一棵树中只有一个根节点时，根节点也算做叶子结点</li><li>结点的深度（depth）是指从根节点（深度为1）开始自顶向下逐层累加到该结点的深度值</li><li>结点的高度（height）是指从最底层叶子节点（高度为1）开始自底向上逐层累加到该结点的高度值</li><li>多棵树组合在一起称为森林</li></ol><p>二叉树的定义：</p><ol><li>要么二叉树没有根节点，是一棵空树</li><li>要么是由根节点，左子树，右子树构成，且左右子树都是二叉树</li></ol><p>二叉树相对于度为2的树来讲，二叉树的左右子树是严格区分的，不能随意交换</p><p>两种特殊二叉树：</p><p><img src="1.png" alt="2"><br><img src="2.png" alt="2"></p><ol><li>满二叉树：除叶子结点外，每个结点的度均为2</li><li>完全二叉树：如果对树中的结点从上到下，从左到右进行编号，和对应一样层数的满二叉树的编号一致，那么这棵树就是满二叉树<ul><li>完全二叉树的特点<ol><li>只允许最后一行有空缺，且空缺从最右边连续存在</li><li>满二叉树是完全二叉树的特殊情况</li></ol></li></ul></li></ol><p>孩子结点：一个结点的子树的根节点（注意不是叶子结点，是紧临着的关系）<br>父亲结点：紧挨的上级结点（就一个）<br>兄弟结点：同父亲结点的结点<br>祖先结点：如果存在从x结点到y结点的从上至下的路径，那么称x为y的祖先结点（不唯一），自己也是<br>子孙结点：如果存在从x结点到y结点的从上至下的路径，那么称y为x的子孙结点（不唯一），自己也是<br><strong>自己既是自己的祖先结点，也是自己的子孙结点</strong>，注意区分</p><h3 id="二叉树的相关操作"><a href="#二叉树的相关操作" class="headerlink" title="二叉树的相关操作"></a>二叉树的相关操作</h3><h4 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h4><p>以下均假设数据域为int data;</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义二叉链表</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    Node* lchild;</span><br><span class="line">    Node* rchild;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//由于在二叉树建立前根节点不存在，因此地址为NULL</span></span><br><span class="line">Node* root=<span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建结点</span></span><br><span class="line"><span class="function">Node* <span class="title">newNode</span><span class="params">(<span class="keyword">int</span> data)</span></span>&#123;</span><br><span class="line">    Node* node=<span class="keyword">new</span> Node;</span><br><span class="line">    node-&gt;data=data;</span><br><span class="line">    node-&gt;lchild=node-&gt;rchild=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> node;<span class="comment">//返回新建结点的地址</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查找</span></span><br><span class="line"><span class="function">Node* <span class="title">search</span><span class="params">(Node* root,<span class="keyword">int</span> data)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root==<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(root-&gt;data==data)&#123;</span><br><span class="line">        <span class="keyword">return</span> root;<span class="comment">//返回该结点的地址</span></span><br><span class="line">    &#125;</span><br><span class="line">    search(root-&gt;lchild,data);</span><br><span class="line">    search(root-&gt;rchild,data);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;<span class="comment">//return都在分支里面，编译报错</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(Node* root,<span class="keyword">int</span> data,<span class="keyword">int</span> newData)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root==<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(root-&gt;data==data)&#123;</span><br><span class="line">        root-&gt;data=newData;</span><br><span class="line">    &#125;</span><br><span class="line">    modify(root-&gt;lchild,data,newData);</span><br><span class="line">    modify(root-&gt;rchild,data,newData);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入新变量，这里注意要用引用，不然只是改变局部变量，</span></span><br><span class="line"><span class="comment">//无法对原变量产生影响</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(Node* &amp;root,<span class="keyword">int</span> newData)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root==<span class="literal">NULL</span>)&#123;</span><br><span class="line">        root=newNode(newData);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//根据具体情况设置判断条件</span></span><br><span class="line">    <span class="keyword">if</span>(root-&gt;data&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        insert(root-&gt;lchild,newData);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        insert(root-&gt;rchild,newData);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//二叉树的建立</span></span><br><span class="line"><span class="function">Node* <span class="title">create</span><span class="params">(<span class="keyword">int</span> input[],<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    Node* root=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        insert(root,input[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意关于二叉树操作的注意事项：</p><ol><li>注意是root==NULL 地址是空的，表示结点不存在 *root==NULL是结点不知道啥情况，内容不存在</li><li>新建结点左右指针别忘了给NULL</li></ol><p>关于完全二叉树的存储结构：<br>可以使用数组便捷操作</p><p><img src="3.png" alt="2"><br>对于第i个元素，他的左右结点存储位置为2*i+1和2*i+2<br>此外</p><ol><li>该数组中元素存放的顺序恰好为该完全二叉树层序遍历序列</li><li>判断是否为叶子结点-&gt;判断左子结点是否存在</li><li>判断某个结点是否为空-&gt;是否大于最大下标</li></ol><h4 id="二叉树的遍历"><a href="#二叉树的遍历" class="headerlink" title="二叉树的遍历"></a>二叉树的遍历</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//先序遍历：根左右</span></span><br><span class="line"><span class="comment">//特点：第一个是根节点</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">preorder</span><span class="params">(Node* root)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root==<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,root-&gt;data);</span><br><span class="line">    preorder(root-&gt;lchild);</span><br><span class="line">    preorder(root-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//中序遍历：左根右</span></span><br><span class="line"><span class="comment">//特点：知道根节点，可以通过中序遍历的结果分开左右子树</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inorder</span><span class="params">(Node* root)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root==<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    inorder(root-&gt;lchild);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,root-&gt;data);</span><br><span class="line">    inorder(root-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//后续遍历：左右根</span></span><br><span class="line"><span class="comment">//特点：最后一个是根结点</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">postorder</span><span class="params">(Node* root)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root==<span class="literal">NULL</span>)&#123;</span><br><span class="line">    &#125;</span><br><span class="line">           <span class="keyword">return</span> ;</span><br><span class="line">    postorder(root-&gt;lchild);</span><br><span class="line">    postorder(root-&gt;rchild);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,root-&gt;data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//层序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">layerorder</span><span class="params">(Node* root)</span></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;Node*&gt; q;<span class="comment">//队列里存的是地址</span></span><br><span class="line">    root-&gt;layer=<span class="number">1</span>;</span><br><span class="line">    q.push(root);</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">        Node* now=q.front();<span class="comment">//目前操作的</span></span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>,now-&gt;data);</span><br><span class="line">        <span class="keyword">if</span>(now-&gt;lchild!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">            now-&gt;lchild-&gt;layer=now-&gt;layer+<span class="number">1</span>;</span><br><span class="line">            q.push(now-&gt;lchild);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(now-&gt;rchild!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">            now-&gt;rchild-&gt;layer=now-&gt;layer+<span class="number">1</span>;</span><br><span class="line">            q.push(now-&gt;rchild);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二叉树的静态实现-比赛常用"><a href="#二叉树的静态实现-比赛常用" class="headerlink" title="二叉树的静态实现(比赛常用)"></a>二叉树的静态实现(比赛常用)</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">100</span>;<span class="comment">//结点个数上限</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//所谓静态二叉链表，就是左右指针域用index来代替</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="keyword">int</span> lchild;</span><br><span class="line">    <span class="keyword">int</span> rchild;</span><br><span class="line">&#125;node[maxn];</span><br><span class="line"></span><br><span class="line"><span class="comment">//生成新的结点</span></span><br><span class="line"><span class="keyword">int</span> id=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">newNode</span><span class="params">(<span class="keyword">int</span> data)</span></span>&#123;</span><br><span class="line">    node[id].data=data;</span><br><span class="line">    node[id].lchild=<span class="number">-1</span>;</span><br><span class="line">    node[id].rchild=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> id++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span> root,<span class="keyword">int</span> data)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root==<span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(node[root].data==data)&#123;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">    search(node[root].lchild,data);</span><br><span class="line">    search(node[root].rchild,data);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> root,<span class="keyword">int</span> data,<span class="keyword">int</span> newData)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root==<span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(node[root].data==data)&#123;</span><br><span class="line">        node[root].data=newData;</span><br><span class="line">    &#125;</span><br><span class="line">    modify(node[root].rchild,data,newData);</span><br><span class="line">    modify(node[root].rchild,data,newData);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> &amp;root,<span class="keyword">int</span> newData)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root==<span class="number">-1</span>)&#123;</span><br><span class="line">        root=newNode(newData);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 根据具体的情况插入</span></span><br><span class="line">    <span class="keyword">if</span>(node[root].lchild&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        insert(node[root].lchild,newData);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        insert(node[root].rchild,newData);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">create</span><span class="params">(<span class="keyword">int</span> input[],<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> root=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        insert(root,input[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">preorder</span><span class="params">(<span class="keyword">int</span> root)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root==<span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,node[root].data);</span><br><span class="line">    preorder(node[root].lchild);</span><br><span class="line">    preorder(node[root].rchild);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//中后层省略了</span></span><br></pre></td></tr></table></figure><p>相关例题<a href="https://sedationh.github.io/2019/11/17/PAT-1020/#%E4%BB%A3%E7%A0%81">PAT A1020</a></p><h3 id="树的相关操作"><a href="#树的相关操作" class="headerlink" title="树的相关操作"></a>树的相关操作</h3><p>提一点，静态树可以利用vector</p><p>相关例题<a href="https://sedationh.github.io/2019/11/19/PAT-1053/">PAT A1053</a></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; child;</span><br><span class="line">&#125;node[maxn];</span><br></pre></td></tr></table></figure><h3 id="二叉查找树-BST"><a href="#二叉查找树-BST" class="headerlink" title="二叉查找树(BST)"></a>二叉查找树(BST)</h3><p>二叉查找树(Binary Search Tree,BST)是一种特殊的二叉树，又称为排序二叉树，二叉搜索树，其定义如下：</p><ol><li>要么二叉查找树是一颗空树</li><li>要么二叉查找树是由根节点，左子树，右子树构成，左右子树都是二叉查找树，且左子树上所有节点的数据域均小于或等于根节点的数据域，右子树所有节点的数据域均大于根节点的数据域</li></ol><p>性质：</p><ul><li>对查找树进行中序遍历，结果有序</li><li>查找效率和形态有关系，而形态和插入顺序有关系</li></ul><p>基本操作</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    Node* lchild;</span><br><span class="line">    Node* rchild;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//左&lt;根&lt;右</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">search</span><span class="params">(Node* root,<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root==<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"failed\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(x==root-&gt;data)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"find %d"</span>,root-&gt;data);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(x&lt;root-&gt;data)&#123;</span><br><span class="line">        search(root-&gt;lchild,x);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        search(root-&gt;rchild,x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建结点</span></span><br><span class="line"><span class="function">Node* <span class="title">newNode</span><span class="params">(<span class="keyword">int</span> data)</span></span>&#123;</span><br><span class="line">    Node* node=<span class="keyword">new</span> Node;</span><br><span class="line">    node-&gt;data=data;</span><br><span class="line">    node-&gt;lchild=node-&gt;rchild=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> node;<span class="comment">//返回新建结点的地址</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(Node* &amp;root,<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root==<span class="literal">NULL</span>)&#123;</span><br><span class="line">        root = newNode(x);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(root-&gt;data==x)&#123;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(x&lt;root-&gt;data)&#123;</span><br><span class="line">        insert(root-&gt;lchild,x);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        insert(root-&gt;rchild,x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Node* <span class="title">create</span><span class="params">(<span class="keyword">int</span> input[],<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    Node* root=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        insert(root,input[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例题<a href="https://sedationh.github.io/2019/11/20/PAT-1043/#%E4%BB%A3%E7%A0%81">PAT A1043</a></p><h3 id="平衡二叉树-AVL树"><a href="#平衡二叉树-AVL树" class="headerlink" title="平衡二叉树(AVL树)"></a>平衡二叉树(AVL树)</h3><p>平衡二叉查找树：简称平衡二叉树，其性质：</p><ol><li>可以是空树</li><li>假如不是空树，任何一个节点的左子树与右子树都是平衡二叉树，且高度之差的绝对值不超过1</li></ol><p>在建树的过程中，我们使用平衡因子进行记录左右子树的高度差</p><p>平衡因子：左子树的高度减去右子树的高度</p><p>代码：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data,<span class="built_in">height</span>;</span><br><span class="line">    Node* lchild;</span><br><span class="line">    Node* rchild;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">Node <span class="title">newNode</span><span class="params">(<span class="keyword">int</span> data)</span></span>&#123;</span><br><span class="line">    Node* node = <span class="keyword">new</span> Node;</span><br><span class="line">    node-&gt;data=data;</span><br><span class="line">    node-&gt;<span class="built_in">height</span>=<span class="number">1</span>;</span><br><span class="line">    node-&gt;lchild=node-&gt;rchild=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获得以root为根节点的子树当前height</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getHeight</span><span class="params">(Node* root)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root==<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> root-&gt;<span class="built_in">height</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//计算节点root的平衡因子</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getBalanceFactor</span><span class="params">(Node* root)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> getHeight(root-&gt;lchild)-getHeight(root-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//更新节点root的height</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updateHeight</span><span class="params">(Node* root)</span></span>&#123;</span><br><span class="line">    root-&gt;<span class="built_in">height</span>=<span class="built_in">max</span>(getHeight(root-&gt;lchild),getHeight(root-&gt;rchild))+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//因为平衡二叉树是二叉排序树，search方法一致</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">search</span><span class="params">(Node* root,<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root==<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"failed\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(x==root-&gt;data)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"find %d"</span>,root-&gt;data);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(x&lt;root-&gt;data)&#123;</span><br><span class="line">        search(root-&gt;lchild,x);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        search(root-&gt;rchild,x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于插入操作是AVL树的难点,插入后要解决平衡问题</p><p>有两个基础操作，左旋和右旋<br><img src="5.png" alt="左旋"><br><img src="7.png" alt="右旋"></p><p>相应的代码</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">L</span><span class="params">(Node* &amp;root)</span></span>&#123;</span><br><span class="line">    Node* tem=root-&gt;rchild;<span class="comment">//root指向节点A，temp指向节点B</span></span><br><span class="line">    root-&gt;rchild=tem-&gt;lchild;<span class="comment">//步骤1</span></span><br><span class="line">    tem-&gt;lchild=root;<span class="comment">//步骤2</span></span><br><span class="line">    <span class="comment">//更新A、B节点的高度</span></span><br><span class="line">    updateHeight(root);</span><br><span class="line">    updateHeight(tem);</span><br><span class="line">    root=tem;<span class="comment">//步骤3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//L和R互为逆过程，注意对比</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">R</span><span class="params">(Node* &amp;root)</span></span>&#123;</span><br><span class="line">    Node* tem=root-&gt;lchild;</span><br><span class="line">    root-&gt;lchild=tem-&gt;rchild;</span><br><span class="line">    tem-&gt;rchild=root;</span><br><span class="line">    updateHeight(root);</span><br><span class="line">    updateHeight(tem);</span><br><span class="line">    root=tem;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>平衡调整的四种类型:</p><p><img src="3.png" alt="2"><br><img src="4.png" alt="2"></p><p>虽然调整方法不同，但总体原则一致：</p><ul><li>降低高度</li><li>保持二叉排序树的性质</li></ul><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(Node* &amp;root,<span class="keyword">int</span> data)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root==<span class="literal">NULL</span>)&#123;</span><br><span class="line">        root=newNode(data);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(data&lt;root-&gt;data)&#123;</span><br><span class="line">        insert(root-&gt;lchild,data);</span><br><span class="line">        updateHeight(root);</span><br><span class="line">        <span class="keyword">if</span>(getBalanceFactor(root)==<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(getBalanceFactor(root-&gt;lchild)==<span class="number">1</span>)&#123;<span class="comment">//LL</span></span><br><span class="line">                R(root);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(getBalanceFactor(root-&gt;lchild)==<span class="number">-1</span>)&#123;<span class="comment">//LR</span></span><br><span class="line">                L(root-&gt;lchild);</span><br><span class="line">                R(root);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        insert(root-&gt;rchild,data);</span><br><span class="line">        updateHeight(root);</span><br><span class="line">        <span class="keyword">if</span>(getBalanceFactor(root)==<span class="number">-2</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(getBalanceFactor(root-&gt;rchild)==<span class="number">-1</span>)&#123;<span class="comment">//RR</span></span><br><span class="line">                L(root);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(getBalanceFactor(root-&gt;rchild)==<span class="number">1</span>)&#123;<span class="comment">//RL</span></span><br><span class="line">                R(root-&gt;rchild);</span><br><span class="line">                L(root);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Node* <span class="title">create</span><span class="params">(<span class="keyword">int</span> input[],<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    Node* root=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        insert(root,input[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="8.png" alt="对于左旋右旋的理解"><br><img src="9.png" alt="对于调整的理解"></p><h3 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h3><p>并查集是一种维护集合的数据结构<br>Union Find Set分别对应并查集</p><p>相关操作</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//数据规模</span></span><br><span class="line"><span class="keyword">const</span> maxn=<span class="number">1e4</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//全局father数组存放上级</span></span><br><span class="line"><span class="keyword">int</span> father[maxn];</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> nn)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        father[i]=i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t=x;<span class="comment">//临时保存，用于路径压缩</span></span><br><span class="line">    <span class="keyword">while</span>(x!=father[t])&#123;<span class="comment">//寻找根节点,保存在x中</span></span><br><span class="line">        x=father[t];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//进行路径压缩，使这条路径上的所有点直接指向根节点</span></span><br><span class="line">    <span class="comment">//每次直接把该点的father改成根节点无法让所有的都指向根节点</span></span><br><span class="line">    <span class="comment">//因为每次添加元素，都可能产生新的最终爸爸，而已经建立的节点没有修改</span></span><br><span class="line">    <span class="keyword">while</span>(t!=father[t])&#123;</span><br><span class="line">        <span class="keyword">int</span> tem=t;<span class="comment">//先保存下要修改的值</span></span><br><span class="line">        t=father[t];</span><br><span class="line">        father[tem]=x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">unit</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fx=<span class="built_in">find</span>(x);</span><br><span class="line">    <span class="keyword">int</span> fy=<span class="built_in">find</span>(y);</span><br><span class="line">    <span class="keyword">if</span>(fx!=fy)&#123;</span><br><span class="line">        father[fx]=fy;<span class="comment">//根据需求再改</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相关例题<a href="https://sedationh.github.io/2019/11/05/PAT-1107/#%E9%A2%98%E7%9B%AE">PAT A1107</a></p><h2 id="图"><a href="#图" class="headerlink" title="图"></a>图</h2><h3 id="图的定义和相关术语"><a href="#图的定义和相关术语" class="headerlink" title="图的定义和相关术语"></a>图的定义和相关术语</h3><p>图相关的代码真是又臭又长，建议根据例题来学习，在此只介绍一些必要的图相关的概念</p><p>图由顶点和边组成，顶点的度是指该顶点相连的边的条数</p><p><strong>连通分量</strong>。在无向图中，如果两个顶点之间可以相互到达(可以是间接的)，那么就称这两个顶点连通，如果对于图中任意两个顶点都连通，称该图为连通图，否则为非连通图，其中的极大连通子图为连通分量<br><strong>强连通分量</strong>。在有向图中，如果两个顶点可以各自通过一条有向路径到达另一个顶点，那么称这两个顶点强连通，如果对同种任意两个顶点都强连通，称该图为强连通图，否者为非强连通图，且称其中的极大强连通子图为强连通分量</p><p><img src="6.png" alt="连通分量与强连通分量示意图，左边为无向图"></p><h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><p>做图相关的题就一个字，<strong>妙</strong></p><p>最短路径<br><a href="https://sedationh.github.io/2019/11/22/PAT-1003/#%E9%A2%98%E7%9B%AE">PAT-1003</a></p>]]></content>
      
      
      <categories>
          
          <category> code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 整理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>刷题技巧整理</title>
      <link href="/2019/10/26/%E5%88%B7%E9%A2%98%E6%8A%80%E5%B7%A7%E6%95%B4%E7%90%86/"/>
      <url>/2019/10/26/%E5%88%B7%E9%A2%98%E6%8A%80%E5%B7%A7%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="字符串处理"><a href="#字符串处理" class="headerlink" title="字符串处理"></a>字符串处理</h2><h3 id="输入问题"><a href="#输入问题" class="headerlink" title="输入问题"></a>输入问题</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">#<span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line">#<span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> a[<span class="number">20</span>];</span><br><span class="line"><span class="built_in">string</span> b;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//1 </span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%[^\n]"</span>,a);</span><br><span class="line">    getchar();<span class="comment">//注意要去掉缓存区的\n;</span></span><br><span class="line">    <span class="comment">//2、cin.getline (char *str, int maxnum)（包含头文件#include &lt;string&gt;）</span></span><br><span class="line">    <span class="built_in">cin</span>.getline(a,<span class="number">20</span>);</span><br><span class="line">    <span class="comment">//3、对于string类型</span></span><br><span class="line">    getline(<span class="built_in">cin</span>,b);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="转换问题"><a href="#转换问题" class="headerlink" title="转换问题"></a>转换问题</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">#<span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line">#<span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> a[<span class="number">20</span>],c[<span class="number">20</span>];</span><br><span class="line"><span class="built_in">string</span> c;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    b=<span class="string">"haha ni shi pig"</span>;</span><br><span class="line">    <span class="built_in">strcpy</span>(a,c.c_str());<span class="comment">//带\0 </span></span><br><span class="line">    <span class="built_in">strcpy</span>(b,c.data());<span class="comment">//不带\0</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-库函数使用"><a href="#C-库函数使用" class="headerlink" title="C++库函数使用"></a>C++库函数使用</h2><h3 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">#<span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line">#<span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vecInt(<span class="number">15</span>);<span class="comment">//初始有15个空间</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;vecInt.<span class="built_in">size</span>()&lt;&lt;<span class="built_in">endl</span>;<span class="comment">//15，实际数据数量</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">        vecInt.push_back(<span class="number">666</span>);<span class="comment">//添加到已有空间的后面</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;vecInt.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="string">" "</span>&lt;&lt;vecInt[i]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;vecInt.<span class="built_in">size</span>()&lt;&lt;<span class="built_in">endl</span>;<span class="comment">//15+10=25</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;vecInt.capacity()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">//删除vector中所有的元素</span></span><br><span class="line">    vecInt.<span class="built_in">clear</span>();<span class="comment">//清空元素，但不回收空间 </span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;vecInt.capacity()&lt;&lt;<span class="built_in">endl</span>;<span class="comment">//可见capacity是表示空间的</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;vecInt.<span class="built_in">size</span>()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">//如果想删除指定位置的元素，用迭代器</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">        vecInt.push_back(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it=vecInt.<span class="built_in">begin</span>();</span><br><span class="line">    <span class="keyword">for</span>(;it!=vecInt.<span class="built_in">end</span>();it++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(*it%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">            vecInt.erase(it);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//erase在每次操作时，迭代器指针会整体前移1，就是每次都会“搬”全部数据</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;vecInt.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;vecInt[i]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">#<span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line">#<span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line">#<span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="built_in">string</span>&gt; mp;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//添加 </span></span><br><span class="line">    mp[<span class="number">1</span>]=<span class="string">"string"</span>;</span><br><span class="line">    mp[<span class="number">2</span>]=<span class="string">"int"</span>;</span><br><span class="line">    <span class="comment">//遍历 </span></span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="built_in">string</span>&gt;::iterator it;</span><br><span class="line">    <span class="keyword">for</span>(it=mp.<span class="built_in">begin</span>();it!=mp.<span class="built_in">end</span>();it++)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;it-&gt;first&lt;&lt;<span class="string">" "</span>&lt;&lt;it-&gt;second&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断是否存在</span></span><br><span class="line">    mp.count(<span class="number">1</span>);<span class="comment">//判断key是否存在 返回0/1</span></span><br><span class="line">    it = mp.<span class="built_in">find</span>(<span class="number">2</span>);<span class="comment">//返回迭代器，如果没有找到，返回mp.end()</span></span><br><span class="line">    <span class="comment">//删除</span></span><br><span class="line">    mp.erase(it);<span class="comment">//通过迭代器删除</span></span><br><span class="line">    mp.erase(<span class="number">1</span>);<span class="comment">//通过关键字删除</span></span><br><span class="line">    mp.erase(mp.<span class="built_in">begin</span>(),mp.<span class="built_in">end</span>());<span class="comment">//清空</span></span><br><span class="line">    <span class="comment">//条数查询</span></span><br><span class="line">    mp.<span class="built_in">size</span>();</span><br><span class="line">    <span class="comment">//排序深入</span></span><br><span class="line">    <span class="comment">//参考</span></span><br><span class="line">    <span class="comment">//map类的定义</span></span><br><span class="line">    <span class="keyword">template</span> &lt; <span class="class"><span class="keyword">class</span> <span class="title">Key</span>, <span class="title">class</span> <span class="title">T</span>, <span class="title">class</span> <span class="title">Compare</span> = <span class="title">less</span>&lt;Key&gt;,</span></span><br><span class="line"><span class="class">           <span class="title">class</span> <span class="title">Allocator</span> = <span class="title">allocator</span>&lt;pair&lt;const Key,T&gt; &gt; &gt; <span class="title">class</span> <span class="title">map</span>;</span></span><br><span class="line">    <span class="comment">//第三个参数，默认为less&lt;Key&gt;，是stl里的一个函数对象</span></span><br><span class="line">    <span class="comment">//调用操作符的类，其对象称为函数对象 </span></span><br><span class="line">    <span class="comment">//less的实现</span></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">struct</span> <span class="title">less</span> :</span> binary_function &lt;T,T,<span class="keyword">bool</span>&gt; &#123;</span><br><span class="line">          <span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span> <span class="params">(<span class="keyword">const</span> T&amp; x, <span class="keyword">const</span> T&amp; y)</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">        </span>&#123;<span class="keyword">return</span> x&lt;y;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//对应的，还有greater</span></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">struct</span> <span class="title">greater</span> :</span> binary_function &lt;T,T,<span class="keyword">bool</span>&gt; &#123;</span><br><span class="line">          <span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span> <span class="params">(<span class="keyword">const</span> T&amp; x, <span class="keyword">const</span> T&amp; y)</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">        </span>&#123;<span class="keyword">return</span> x&gt;y;&#125;</span><br><span class="line">    &#125;; </span><br><span class="line">    <span class="comment">//如果想实现依据key从大到小排序</span></span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="keyword">int</span>,greater&lt;<span class="built_in">string</span>&gt; &gt; mp2;</span><br><span class="line">    <span class="comment">//如果想自定义key的顺序</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">cmp</span> &#123;</span></span><br><span class="line">        <span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; k1, <span class="keyword">const</span> <span class="built_in">string</span>&amp; k2)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> k1.length() &lt; k2.length();</span><br><span class="line">          &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="keyword">int</span>,cmp&gt; mp3;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考<br><a href="https://blog.csdn.net/weixin_34075551/article/details/86345925" target="_blank" rel="noopener">https://blog.csdn.net/weixin_34075551/article/details/86345925</a><br><a href="https://blog.csdn.net/a3192048/article/details/83019944" target="_blank" rel="noopener">https://blog.csdn.net/a3192048/article/details/83019944</a></p>]]></content>
      
      
      <categories>
          
          <category> code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 整理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT-1142</title>
      <link href="/2019/10/25/PAT-1142/"/>
      <url>/2019/10/25/PAT-1142/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>Maximal Clique<br><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805343979159552" target="_blank" rel="noopener">https://pintia.cn/problem-sets/994805342720868352/problems/994805343979159552</a></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>团(clique)是图论中的用语<br>对于给定图G=(V,E)。其中，V={1,…,n}是图G的顶点集，E是图G的边集。图G的团就是一个两两之间有边的顶点集合。<br>简单地说，团是G的一个完全子图。如果一个团不被其他任一团所包含，即它不是其他任一团的真子集，则称该团为图G的极大团（maximal clique）。顶点最多的极大团，称之为图G的最大团（maximum clique）。最大团问题的目标就是要找到给定图的最大团。</p><h3 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h3><ol><li>判断询问之间是否都相互连接</li><li>找出剩下点，判断是否存在一点能与所有的剩下点连接(可加入该团)</li></ol><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li>以后对于flag的定义要想明确加注释！</li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">#<span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line">#<span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[<span class="number">210</span>][<span class="number">210</span>];</span><br><span class="line"><span class="keyword">int</span> nv,ne,k;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;nv,&amp;ne);</span><br><span class="line">    <span class="keyword">int</span> a,b;</span><br><span class="line">    <span class="keyword">while</span>(ne--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a,&amp;b);</span><br><span class="line">        <span class="built_in">map</span>[a][b]=<span class="built_in">map</span>[b][a]=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;k);</span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">    <span class="keyword">while</span>(k--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;num);</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec(num);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num;i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;vec[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断</span></span><br><span class="line">        <span class="keyword">bool</span> flag1=<span class="literal">true</span>,flag2=<span class="literal">true</span>;<span class="comment">//不是clique ,是maximal clique，</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;num;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i==j)&#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">map</span>[vec[i] ][vec[j] ]==<span class="number">0</span>)&#123;</span><br><span class="line">                    flag1=<span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//查看剩余的点是否都可以形成连接</span></span><br><span class="line">        <span class="comment">//找出剩余点</span></span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; left;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=nv;i++)&#123;</span><br><span class="line">            <span class="keyword">bool</span> f=<span class="literal">true</span>;<span class="comment">//是否能放入</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;num;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i==vec[j])&#123;</span><br><span class="line">                    f=<span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(f)&#123;</span><br><span class="line">                left.push_back(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断剩余点的连接</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;left.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> left_n=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;vec.<span class="built_in">size</span>();j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">map</span>[left[i] ][vec[j] ]==<span class="number">1</span>)&#123;<span class="comment">//全部都是1，才能判断为false</span></span><br><span class="line">                    left_n++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(left_n==vec.<span class="built_in">size</span>())&#123;</span><br><span class="line">                    flag2=<span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag1 &amp;&amp; flag2)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"Yes"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(flag1)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"Not Maximal"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"Not a Clique"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图 </tag>
            
            <tag> PAT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT-1122</title>
      <link href="/2019/10/22/PAT-1122/"/>
      <url>/2019/10/22/PAT-1122/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>Hamiltonian Cycle</p><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805351814119424" target="_blank" rel="noopener">https://pintia.cn/problem-sets/994805342720868352/problems/994805351814119424</a></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>问对于每一组询问，判定给定的路径是否为哈密顿路径<br><a href="https://www.jianshu.com/p/2068fb96ee73" target="_blank" rel="noopener">图论基础知识</a><br><a href="https://www.jianshu.com/p/2068fb96ee73" target="_blank" rel="noopener">哈密顿回路</a><br>在一个回路中，除了经过初始节点两次以外，其余每一个节点都仅经过一次，<br>这样的回路成为哈密顿回路</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">#<span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line">#<span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line">#<span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line">#<span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;<span class="comment">//点、边</span></span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[<span class="number">210</span>][<span class="number">210</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">int</span> a,b;</span><br><span class="line">    <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a,&amp;b);</span><br><span class="line">        <span class="built_in">map</span>[a][b]=<span class="built_in">map</span>[b][a]=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> k;<span class="comment">//询问</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;k);</span><br><span class="line">    <span class="keyword">int</span> num;<span class="comment">//路径上点的个数</span></span><br><span class="line">    <span class="keyword">while</span>(k--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;num);</span><br><span class="line">        <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec(num);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num;i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;vec[i]);</span><br><span class="line">            s.insert(vec[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//进行判断</span></span><br><span class="line">        <span class="keyword">bool</span> flag1=<span class="literal">true</span>,flag2=<span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(s.<span class="built_in">size</span>()!=n || num<span class="number">-1</span>!=n || vec[<span class="number">0</span>]!=vec[num<span class="number">-1</span>])&#123;</span><br><span class="line">            flag1=<span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num<span class="number">-1</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">map</span>[vec[i] ][vec[i+<span class="number">1</span>] ]!=<span class="number">1</span>)&#123;</span><br><span class="line">                flag2=<span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag1 &amp;&amp; flag2)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"YES\n"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT </tag>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT计划</title>
      <link href="/2019/10/22/PAT%E8%AE%A1%E5%88%92/"/>
      <url>/2019/10/22/PAT%E8%AE%A1%E5%88%92/</url>
      
        <content type="html"><![CDATA[<p>距离报考结束还有<strong>39</strong>天<br>距离正式考试还有<strong>46</strong>天</p><hr><p>每一次考试都要认真对待，PAT对于浙大考试很重要<br>接下来要认真刷题，不能再划水了<br>对于做过的题，尽量都做笔记记录，方便日后的复习与整理<br>在这里放几个方便的链接,按照类型去刷题<br><a href="https://pintia.cn/problem-sets/994805342720868352/problems/type/7" target="_blank" rel="noopener">PAT官网</a><br><a href="https://blog.csdn.net/weixin_43028756/article/details/95077917" target="_blank" rel="noopener">题目分类</a></p>]]></content>
      
      
      <categories>
          
          <category> life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT </tag>
            
            <tag> 竞赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown语法学习</title>
      <link href="/2019/10/22/Markdown%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0/"/>
      <url>/2019/10/22/Markdown%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="这是一级标题"><a href="#这是一级标题" class="headerlink" title="这是一级标题"></a>这是一级标题</h2><p>由#号的个数来决定，一个是一级标题（最大），两个是二级标题等等</p><p>分割线：三个以上的短线 即可作出分割线</p><hr><p><strong>加粗</strong>的话用前后各两个星号围着</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">#<span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line">#<span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">bool</span> book[<span class="number">10010</span>];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">    <span class="keyword">while</span>(n--)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;num;</span><br><span class="line">        vec.push_back(num);</span><br><span class="line">        book[num]=<span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;vec.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(book[vec[i] ]==<span class="literal">false</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d"</span>,vec[i]);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"None"</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">![](相对位置) -&gt;图片</span><br><span class="line">[文字内容](链接)</span><br></pre></td></tr></table></figure><p><a href="https://www.baidu.com/?tn=98010089_dg&ch=14" target="_blank" rel="noopener">百度</a></p><p><a href="https://www.jianshu.com/p/191d1e21f7ed" target="_blank" rel="noopener">这个作者写的很好</a></p>]]></content>
      
      
      <categories>
          
          <category> note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文本编辑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一周年纪念</title>
      <link href="/2019/10/22/%E4%B8%80%E5%91%A8%E5%B9%B4%E7%BA%AA%E5%BF%B5/"/>
      <url>/2019/10/22/%E4%B8%80%E5%91%A8%E5%B9%B4%E7%BA%AA%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<h2 id="序"><a href="#序" class="headerlink" title="序"></a>序</h2><p><a href="https://ai.bbai520.com/love.php?0528&id=33074" target="_blank" rel="noopener">计时网站</a></p><p>距离我和凝凝的一年纪念日还有不到<strong>二十天</strong>,我打算从今天开始一天一天写点东西，把每天我们俩开心好玩的事情记录下来，好好度过我们这第一次的纪念日&gt; &lt;</p><h2 id="第一天10-22"><a href="#第一天10-22" class="headerlink" title="第一天10.22"></a>第一天10.22</h2><p>晚上一起吃了饭，俩人踱着老年人的步伐去小吃摊那边溜达，大坑搬迁后，那里简直成了新的小吃一条街，过了马路，全是卖吃的小摊，一起买了甜甜的大枣，新鲜的苹果，红薯，热的冰糖雪梨还有米糕，回来的路上，我抱着她慢慢走着，天有些冷，可是我们俩靠的近就不觉得冷啦，哈，我看着她，慢慢走着，感觉这样好开心o(<em>￣▽￣</em>)ブ，开心的小日子 :)</p><p>大枣好甜，回寝室后拍个照片回头上传,今晚搞了一晚上网站，先到这里吧O(∩_∩)O</p><p><img src="2.jpg" alt="2"></p><p>再补充一张昨天晚上的战斗！！！<br><img src="4.jpg" alt="2"></p><p><strong>时间记录</strong><br><img src="1.png" alt="2"></p><h2 id="第二天10-23"><a href="#第二天10-23" class="headerlink" title="第二天10.23"></a>第二天10.23</h2><p>周三是很忙的一天，上午上课下午去医院，俩人也就一起吃了午饭<br><img src="3.jpg" alt="2"><br>晚上也有课，到晚上终于有时间出去，我们俩骑着小电摩，一起吃了烧鸡公，味道还行，就是有点腻，凝凝穿着黑色的长裙，回来的路上有些冷，她还用手给我拉着衣服，嘿嘿，回来后逛超市逛到人家关门，哈哈，这是我们的第二天</p><p><strong>时间记录</strong><br>今天我忘记截屏了&gt; &lt;</p><h2 id="第三天10-24"><a href="#第三天10-24" class="headerlink" title="第三天10.24"></a>第三天10.24</h2><p>当然还是中午一起吃的饭啊，不过时间匆忙忘记拍照了，下午凝凝自己去了健身房，回来的时候我去接她，刚路过租用自行车的地方就看到了她，穿着粉色的衣服向我招手，可惜没法拍照，真想给记下来，一下午感觉都不太好，头昏脑胀，还没有力气，可是刚见到她的时候感觉就忘掉了这些，，，哈哈，她已经在有意识的控制吃饭啦，还给我看她记录的东西，下面是今天的晚饭<br><img src="6.jpg" alt="2"></p><p><strong>时间记录</strong><br><img src="5.png" alt="2"></p><h2 id="第四天10-25"><a href="#第四天10-25" class="headerlink" title="第四天10.25"></a>第四天10.25</h2><p>今天是周五，上午我都是课，凝凝就去自己买衣服啦，中午我放学她也刚好回来，穿着浅色的风衣，里面是粉色的长裙，背着个白色小包，老美了，拎着大包小包，嫌学校人多，我们就一起出去吃。<br><img src="7.jpg" alt="2"><br>学校今天出了点事，带着凝凝出去散散心，凝凝马上要开始哥本哈根食谱<br><a href="https://zhuanlan.zhihu.com/p/33345695" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/33345695</a><br>我们一起买了许多蔬菜，菠菜啊，芹菜啊，还有生菜，之后就是<del>无聊的逛街时间</del>，还去了纪念品日买了个耳机和化妆小玩意。<br>出来后我表示我饿了，盯上了热干面，吃完辣的要死，还很干QAQ，凝凝之后辣的肚子疼，但她说还要来吃….<br><img src="9.jpg" alt="2"></p><p><strong>时间记录</strong><br><img src="8.png" alt="2"></p><h2 id="第五天10-26"><a href="#第五天10-26" class="headerlink" title="第五天10.26"></a>第五天10.26</h2><p>今天是周六，下午要做实验课，凝凝也要去市里，我们就一起坐公交车出去啦，车上人很多，一路上凝凝都在纠结整什么颜色的指甲和什么颜色的头发,等我们到老校区的时候，已经一点多了，一点半上课，急匆匆进了教室，凝凝自己去了国购，等再见面的时候，已经四点多了，开着微信的共享当前位置，一点点靠近的感觉真好玩，我们俩都没吃午饭，一起去国购三楼吃了地锅鸡<br><img src="10.jpg" alt="2"><br>出来后一起去了理发店，我出去找了找吹嘴，然而没有买到，自己买了个小鸡腿聊以安慰<del>QAQ</del><br><img src="11.jpg" alt="2"><br>回来后陪她做头发，还耍了耍吃鸡，一起背了背单词，出来的时候已经是十点多了，凝凝饿了，说我没给她卖红薯，她丫的，就是想吃，最后一起吃了老鸭面汤，挺暖的，感觉她变得好多了，我们俩也不像过去一样吵架了，一起走的时候挺开心的~、<br><strong>时间记录</strong><br><img src="13.png" alt="2"></p><h2 id="第六天10-27"><a href="#第六天10-27" class="headerlink" title="第六天10.27"></a>第六天10.27</h2><p>上午体育测试，我们俩好巧，跳远遇到，肺活量也遇上，一起排了肺活量的队伍，好慢啊，中间她帮我站着队，我把剩下的坐位体前屈和身体测量都完成了，对了，引体向上我拉了13个，hhh，肺活量她松松吹了个3777，我比她还低，三千多，忘了多少了，令人伤心<br>从今天起凝凝就不和我一起吃饭了，她丫的要自己吃哥本哈根餐，网上买了一小箱的食物，昨天到的，今天她的午饭是下面这样的<br><img src="12.jpg" alt="2"><br>下午一起来敲代码，三个小时后，回去吃饭，我今晚吃的鱼香肉丝，没拍照，她吃滴在下面<br><img src="14.jpg" alt="2"><br>今晚看关于机器学习的看得我脑壳痛，不想再去分这个心了，这个阶段先把PAT考好，四级考好吧~<br><strong>时间记录</strong><br><img src="15.png" alt="2"></p><h2 id="第六天10-28"><a href="#第六天10-28" class="headerlink" title="第六天10.28"></a>第六天10.28</h2><p>今天我们吵架了，我也闹得过分了，过程不再详说，我谈谈自己</p><ul><li>不能太冲动，也不要试图用冲动解决问题，良好的关系需要彼此相互的包容和理解</li><li>要珍惜她，人生的很长时间要和她一起度过，要付出真心，也要付出耐心</li><li>好好学习是很重要，但别忽视人家</li></ul><p><strong>时间记录</strong><br>昨晚太晚，没能记录&gt; &lt;</p><h2 id="第七天10-29"><a href="#第七天10-29" class="headerlink" title="第七天10.29"></a>第七天10.29</h2><p>早上起晚了，穿着拖鞋给凝凝送耳机，她看着我脚冷，寻思着给我买个棉拖<br>中午教室离得很近，一起走回了寝室，午饭我自己吃的大骨汤，自己就不晒什么图啦，很好吃，让我吃了很久<br>下午体育课划水，就一起去了健身房，跑步总是岔气，她饭吃得少也很饿，但还是坚持着跑下来了，洗澡后等了她半个小时，她丫的<br>晚上去买叉子，她想偷亲我被我躲开了，hhh，晚上一起走的挺开心的，也让她看了看妈妈给我发的<del>鸡汤</del></p><p><strong>时间记录</strong><br><img src="16.png" alt="2"></p><h2 id="第八天10-30"><a href="#第八天10-30" class="headerlink" title="第八天10.30"></a>第八天10.30</h2><p>先来张凝凝的午饭<br><img src="19.jpg" alt="2"><br>中午说错话，惹凝凝生气惹，&gt; &lt;,经历前天的事情，我从另一个角度看待她的生气，却有种可爱的味道，天天叫我滚，出去的时候却总是拉紧我，所以说啊，有些话别当真，尤其是凝凝的话，凝凝的心很善良，即使暴躁，也是可爱的暴躁，哄哄就好啦，看我快乐三连击<br><img src="20.jpg" alt="2"><br><img src="21.jpg" alt="2"><br><img src="22.jpg" alt="2"><br>下午拔牙的计划取消，一起去批发市场逛了逛，之后去国购买菜，到哪里后，凝凝不想下车，我们俩一起晒了晒太阳,<del>惬意的老年生活</del><br><img src="18.jpg" alt="2"><br>今天很开心呢<br><strong>时间记录</strong><br><img src="17.png" alt="2"></p><h2 id="第十三天11-04"><a href="#第十三天11-04" class="headerlink" title="第十三天11.04"></a>第十三天11.04</h2><p>装Mac系统+博客系统一直出问题，今天才正式完工，昨天写的不知道为啥没有保存，没事，接着好好写便是:)</p><p>今天好像没有太多时间在一起，下午牙疼的厉害去看了看为什么，回来后我们一起去买菜，挺冷的，凝凝帮我拉着书包，抱着我，暖和多了</p><p>回来后给凝凝打水，拿着凝凝的饭卡吃饭</p><p>日子很平淡，但挺幸福的</p><p><strong>时间记录</strong><br><img src="23.png" alt="1"></p><h2 id="第十四天11-05"><a href="#第十四天11-05" class="headerlink" title="第十四天11.05"></a>第十四天11.05</h2><p>上午第二节课，我们俩教室离得很近，课间一起发呆，哈哈<br>下午凝凝和张一起去看电影，她竟然还睡着了，有截图为证<br><img src="25.png" alt="2"><br>晚上凝凝给我做了大补汤，我感觉是对我这几天拔牙痛苦的安慰<br><img src="27.jpg" alt="2"><br>喝起来美味极了，第一次喝到放有牛奶煲的汤呢<br><img src="26.jpeg" alt="2"><br>今晚一起吃的很开心，也一起聊了聊一周年那天的计划<br><strong>时间记录</strong><br><img src="24.png" alt="2"></p><h2 id="第十四天11-06"><a href="#第十四天11-06" class="headerlink" title="第十四天11.06"></a>第十四天11.06</h2><p>凝凝今天下午舞蹈课上到四点，我想找找她并且把碗啥的还给他，一起去拿快递<br>我们俩的拖鞋和毛衣到了，绿色的，我还没来得及穿，晚上回去试试<br>晚上凝凝时间有点赶，她要去排演一个英语小剧场，下来见到她，带个大眼睛框，穿上了刚买的绿色毛衣，老可爱了，拿个水杯，说那个是道具<br>晚上上课，凝凝突然打电话过来，发现自己没带钥匙，寝室人都在上课，我趁着老师一低头，骑着车把她室友的钥匙送给她，我们见面抱了又抱，她丫的，让不让我上课了<br><img src="29.jpg" alt="2"><br>今天学习很充实，凝凝变得考虑我很多，但是她为啥到现在还不给我发消息嘞<br>太好玩了，我刚写到这里时间是10:34，凝凝就给我发了个哈喽，问我回去没<br><img src="30.png" alt="2"><br><strong>时间记录</strong><br><img src="28.png" alt="2"></p><h2 id="第十五天11-07"><a href="#第十五天11-07" class="headerlink" title="第十五天11.07"></a>第十五天11.07</h2><p>中午吃了凝凝给我做的牛肉萝卜汤，味道挺好的，牛肉吃着也舒服，可我没吃完，凝凝老生气了，说以后不给我做了，可在我的魅力下，她还是不生气了，<del>以后乖乖做饭</del><br><img src="32.jpg" alt="2"><br>以下是真实的情况<br><img src="33.jpg" alt="2"></p><p>晚上处理视频，计划下之后的玩耍，嘻嘻 :)<br><strong>时间记录</strong><br><img src="31.png" alt="2"></p>]]></content>
      
      
      <categories>
          
          <category> life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 纪念日 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
